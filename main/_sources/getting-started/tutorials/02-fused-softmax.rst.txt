
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.911066   693.496706     206.642241
    1     384.0   655.584142   821.066059     264.362526
    2     512.0   807.106999   948.947588     303.036287
    3     640.0   884.118672   967.951930     330.744028
    4     768.0   952.234379  1027.200691     348.013718
    5     896.0  1004.986731  1062.065658     352.305526
    6    1024.0  1058.075854  1102.683114     351.718358
    7    1152.0  1093.942661  1036.757577     347.055287
    8    1280.0  1122.453357  1068.865333     349.213252
    9    1408.0  1159.874753  1101.087659     339.842420
    10   1536.0  1188.775626  1141.174129     333.321937
    11   1664.0  1211.550019  1161.684294     330.394573
    12   1792.0  1227.768238  1187.328472     325.641661
    13   1920.0  1265.059297  1197.334079     324.921881
    14   2048.0  1271.521872  1226.636456     324.259311
    15   2176.0  1238.729451   962.801259     325.329732
    16   2304.0  1250.755771   997.041277     325.170879
    17   2432.0  1269.089036  1036.216664     326.522990
    18   2560.0  1282.730879  1065.838349     327.298841
    19   2688.0  1294.493322  1098.776389     329.238220
    20   2816.0  1308.896405  1123.475649     328.918784
    21   2944.0  1311.877255  1145.902651     331.784130
    22   3072.0  1320.014951  1167.940858     333.420441
    23   3200.0  1333.079334  1175.433133     334.736108
    24   3328.0  1340.409264  1202.402493     336.101741
    25   3456.0  1350.123630  1224.041506     337.175822
    26   3584.0  1356.831888  1247.246251     338.060751
    27   3712.0  1365.168587  1266.286411     340.134042
    28   3840.0  1365.908190  1280.136754     340.275108
    29   3968.0  1369.170494  1296.628673     340.661131
    30   4096.0  1380.325181  1314.310507     338.084023
    31   4224.0  1321.984983  1290.533314     342.902808
    32   4352.0  1336.485473  1319.112344     345.597144
    33   4480.0  1339.778497  1340.204501     345.802896
    34   4608.0  1349.960216  1353.298715     347.067764
    35   4736.0  1348.201822  1366.860129     347.643793
    36   4864.0  1364.610971  1383.483342     349.301731
    37   4992.0  1361.605095  1396.952177     350.126206
    38   5120.0  1367.969308  1405.714255     351.137769
    39   5248.0  1369.211069  1362.956626     351.220090
    40   5376.0  1372.007202  1371.932309     352.190377
    41   5504.0  1375.397758  1393.076196     353.315948
    42   5632.0  1388.673184  1408.000002     353.101591
    43   5760.0  1390.595413  1420.259871     354.981661
    44   5888.0  1385.347304  1433.645330     354.721053
    45   6016.0  1400.259620  1431.825974     356.983223
    46   6144.0  1400.769462  1443.617764     357.090748
    47   6272.0  1403.433024  1409.096567     357.802736
    48   6400.0  1408.384238  1415.842950     358.184695
    49   6528.0  1411.250199  1430.548777     359.048437
    50   6656.0  1407.935983  1436.208943     359.227547
    51   6784.0  1414.360513  1438.281412     360.235556
    52   6912.0  1415.139615  1446.836573     360.679685
    53   7040.0  1410.254097  1457.101797     360.814541
    54   7168.0  1417.198372  1462.008986     361.777995
    55   7296.0  1421.754124  1088.153478     362.598248
    56   7424.0  1427.346841  1100.474565     362.937364
    57   7552.0  1425.558444  1115.021443     363.409064
    58   7680.0  1425.174602  1126.252827     363.604535
    59   7808.0  1424.890138  1135.553278     364.285116
    60   7936.0  1428.880566  1144.647840     364.354617
    61   8064.0  1429.935656  1153.227685     365.153198
    62   8192.0  1426.491303  1155.667890     363.912889
    63   8320.0  1380.664760  1112.824558     361.886639
    64   8448.0  1384.230228  1122.932789     362.563507
    65   8576.0  1388.128706  1122.993051     363.428152
    66   8704.0  1381.350123  1132.246048     364.511938
    67   8832.0  1395.428895  1128.248789     365.098337
    68   8960.0  1385.356980  1131.109100     365.923208
    69   9088.0  1393.601928  1131.690789     365.908078
    70   9216.0  1406.452270  1131.669062     367.373809
    71   9344.0  1388.388953  1418.991743     367.787995
    72   9472.0  1394.854060  1430.940249     368.157417
    73   9600.0  1396.924657  1431.788579     368.917247
    74   9728.0  1395.868913  1439.292194     369.289349
    75   9856.0  1397.148171  1439.491350     370.276972
    76   9984.0  1393.696221  1452.700738     370.532747
    77  10112.0  1404.952599  1452.577573     370.989501
    78  10240.0  1406.205322  1465.799297     371.896542
    79  10368.0  1409.507783  1462.913009     370.090292
    80  10496.0  1408.948078  1462.449281     369.867663
    81  10624.0  1402.687068  1462.837226     369.905996
    82  10752.0  1386.771345  1468.640463     371.862810
    83  10880.0  1387.583554  1478.060035     371.921661
    84  11008.0  1415.839643  1472.736116     372.151466
    85  11136.0  1415.343339  1482.607986     372.722125
    86  11264.0  1408.259704  1484.834459     372.877241
    87  11392.0  1414.042980  1488.430629     373.798741
    88  11520.0  1413.426246  1495.347781     373.609881
    89  11648.0  1417.506049  1498.749729     374.693218
    90  11776.0  1424.646691  1503.584633     375.046071
    91  11904.0  1427.298620  1507.063744     375.396551
    92  12032.0  1410.204076  1509.152033     375.845226
    93  12160.0  1410.960408  1514.085620     375.784249
    94  12288.0  1422.119351  1421.758494     376.203247
    95  12416.0  1430.275521  1394.903815     374.107951
    96  12544.0  1434.171655  1389.807528     375.753437
    97  12672.0  1430.218940  1390.177211     375.440272




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.225 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
