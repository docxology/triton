
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.456893   677.097218     206.251116
    1     384.0   653.277735   813.668484     260.143822
    2     512.0   814.514151   937.525409     302.840925
    3     640.0   877.626141   913.978288     330.633018
    4     768.0   952.376486   991.176264     349.257693
    5     896.0  1021.095486  1036.003599     356.929817
    6    1024.0  1060.304431  1084.785397     354.824031
    7    1152.0  1096.167170  1065.513490     347.483118
    8    1280.0  1130.616010  1110.123040     348.457346
    9    1408.0  1153.993139  1129.206851     339.649525
    10   1536.0  1196.579971  1166.906649     331.879284
    11   1664.0  1217.880244  1181.359291     329.722867
    12   1792.0  1238.849826  1190.231080     324.857274
    13   1920.0  1261.215199  1226.797091     324.716297
    14   2048.0  1267.920995  1244.862754     325.222762
    15   2176.0  1237.284966   965.965425     325.609031
    16   2304.0  1252.268428  1002.698863     326.241921
    17   2432.0  1275.014540  1034.930625     327.157696
    18   2560.0  1286.448256  1074.178660     327.825699
    19   2688.0  1291.612138  1098.547236     328.707464
    20   2816.0  1309.650410  1121.882830     329.059461
    21   2944.0  1315.867646  1148.844226     331.632212
    22   3072.0  1314.809051  1171.556605     333.431825
    23   3200.0  1329.579602  1170.682953     334.867652
    24   3328.0  1345.177531  1203.617911     336.490778
    25   3456.0  1351.613277  1224.628496     337.430573
    26   3584.0  1362.856323  1242.981419     338.209297
    27   3712.0  1364.901893  1262.861440     341.031804
    28   3840.0  1366.720847  1283.903555     340.332353
    29   3968.0  1366.878442  1294.677698     341.102872
    30   4096.0  1383.916171  1317.256548     338.414968
    31   4224.0  1326.514153  1273.546224     343.385555
    32   4352.0  1337.088068  1298.820916     345.093059
    33   4480.0  1342.357014  1314.451339     345.435992
    34   4608.0  1353.623897  1335.405819     347.087331
    35   4736.0  1355.631803  1347.815756     347.932843
    36   4864.0  1367.508170  1360.698600     349.100399
    37   4992.0  1365.726786  1364.164194     350.287340
    38   5120.0  1375.492457  1389.591544     350.891825
    39   5248.0  1368.544083  1358.850857     351.372955
    40   5376.0  1371.376451  1368.261638     351.601599
    41   5504.0  1374.774369  1382.590731     353.294826
    42   5632.0  1388.762028  1389.160040     353.099710
    43   5760.0  1384.680178  1410.080525     354.879374
    44   5888.0  1382.003857  1417.177757     355.032044
    45   6016.0  1392.823067  1414.510325     356.806162
    46   6144.0  1404.920640  1437.205611     356.672368
    47   6272.0  1404.291672  1393.007293     358.149740
    48   6400.0  1408.583191  1414.882267     358.779884
    49   6528.0  1406.167683  1414.491232     359.651861
    50   6656.0  1409.810771  1435.870944     359.278044
    51   6784.0  1416.181018  1433.400145     360.141905
    52   6912.0  1418.293293  1450.963544     360.583219
    53   7040.0  1415.401378  1443.005621     360.713668
    54   7168.0  1416.417232  1459.382052     362.006490
    55   7296.0  1417.143601  1086.446221     362.761296
    56   7424.0  1423.598830  1098.335644     362.849080
    57   7552.0  1425.407666  1111.372267     363.709882
    58   7680.0  1430.698189  1123.431970     363.971077
    59   7808.0  1424.576614  1133.231130     364.557689
    60   7936.0  1423.469774  1142.161783     364.818868
    61   8064.0  1430.078341  1149.922598     364.876920
    62   8192.0  1426.168045  1152.795805     364.053091
    63   8320.0  1381.592342  1115.730199     362.052169
    64   8448.0  1387.031787  1123.187189     362.581352
    65   8576.0  1389.214168  1126.740431     363.281154
    66   8704.0  1382.933858  1132.774928     364.449531
    67   8832.0  1395.977825  1132.085536     365.263039
    68   8960.0  1386.087981  1139.861098     366.087845
    69   9088.0  1394.545672  1136.036831     366.991420
    70   9216.0  1402.944571  1143.407797     367.520492
    71   9344.0  1387.433832  1417.324255     367.765777
    72   9472.0  1394.522997  1430.931354     367.965233
    73   9600.0  1398.751020  1434.127499     368.389493
    74   9728.0  1395.537506  1442.102566     369.907458
    75   9856.0  1394.404554  1437.915273     369.592558
    76   9984.0  1389.875926  1448.459562     369.710919
    77  10112.0  1402.591037  1455.366346     371.677522
    78  10240.0  1402.512413  1465.863868     371.918521
    79  10368.0  1413.434962  1458.405355     370.752893
    80  10496.0  1406.571288  1467.598273     370.035975
    81  10624.0  1403.180025  1465.151945     370.606130
    82  10752.0  1394.674935  1467.728622     371.670889
    83  10880.0  1388.593926  1476.263950     372.014935
    84  11008.0  1417.212337  1473.556426     372.217745
    85  11136.0  1419.874752  1482.300104     372.642401
    86  11264.0  1406.602276  1485.304823     373.183418
    87  11392.0  1416.938215  1487.330135     373.913323
    88  11520.0  1410.525824  1497.040559     373.623090
    89  11648.0  1410.991901  1501.000081     374.423104
    90  11776.0  1428.388713  1500.895585     375.134967
    91  11904.0  1425.996964  1509.238157     375.690952
    92  12032.0  1412.955466  1507.016369     375.902699
    93  12160.0  1412.703833  1512.407703     375.801953
    94  12288.0  1421.643273  1419.530155     376.105513
    95  12416.0  1427.390911  1393.117034     374.995097
    96  12544.0  1439.818489  1390.983858     375.406415
    97  12672.0  1425.225281  1390.320894     375.334699




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.170 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
