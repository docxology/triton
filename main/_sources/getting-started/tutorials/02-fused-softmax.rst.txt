
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.840022   703.108035     205.887167
    1     384.0   657.159639   812.451768     262.146693
    2     512.0   802.459516   916.395800     303.765992
    3     640.0   919.451962   931.484163     330.621921
    4     768.0   991.245796   991.903079     350.478815
    5     896.0  1047.235109  1026.941957     353.766867
    6    1024.0  1069.785672  1067.788491     352.873095
    7    1152.0  1089.366480  1076.219503     349.208118
    8    1280.0  1141.155000  1103.082006     349.554504
    9    1408.0  1172.192202  1142.472838     341.624133
    10   1536.0  1195.779677  1164.173729     332.354200
    11   1664.0  1219.852951  1181.917206     329.084984
    12   1792.0  1230.943136  1192.957688     325.215637
    13   1920.0  1257.776631  1225.505387     324.585059
    14   2048.0  1276.184786  1244.209505     325.299911
    15   2176.0  1232.639703   965.819560     325.034088
    16   2304.0  1257.676712   999.894068     325.762906
    17   2432.0  1268.679371  1037.470490     326.053023
    18   2560.0  1289.389221  1066.379429     329.155525
    19   2688.0  1296.738551  1097.529075     329.790016
    20   2816.0  1310.652209  1122.834962     330.097224
    21   2944.0  1320.466192  1141.436979     331.669651
    22   3072.0  1316.585239  1173.058913     333.623682
    23   3200.0  1341.137678  1175.172408     335.519819
    24   3328.0  1344.996993  1203.624530     336.024475
    25   3456.0  1352.514092  1222.479130     336.980668
    26   3584.0  1361.531301  1247.137677     337.875990
    27   3712.0  1368.034724  1262.608046     340.863578
    28   3840.0  1375.914280  1283.468632     340.009075
    29   3968.0  1380.481686  1300.882400     341.289414
    30   4096.0  1392.153469  1313.848244     338.976100
    31   4224.0  1329.302125  1274.646992     342.638710
    32   4352.0  1341.975075  1295.525540     344.746618
    33   4480.0  1347.725231  1315.795757     345.711964
    34   4608.0  1359.671548  1331.809953     347.246756
    35   4736.0  1359.383927  1348.307717     348.439095
    36   4864.0  1367.637788  1358.002656     349.059013
    37   4992.0  1370.157449  1375.853225     350.229386
    38   5120.0  1376.495025  1387.899256     350.640279
    39   5248.0  1375.622543  1357.673068     351.967117
    40   5376.0  1376.614405  1371.783804     351.817877
    41   5504.0  1381.492824  1385.470976     353.469890
    42   5632.0  1393.787379  1388.294278     353.174515
    43   5760.0  1396.299932  1405.971325     355.074699
    44   5888.0  1392.640012  1418.807847     354.574503
    45   6016.0  1399.292225  1420.424216     356.717698
    46   6144.0  1411.198504  1427.625246     357.362346
    47   6272.0  1410.202864  1401.337066     357.581008
    48   6400.0  1410.083574  1408.810908     358.816863
    49   6528.0  1413.886169  1408.002650     359.231848
    50   6656.0  1414.325055  1438.547803     359.530733
    51   6784.0  1418.095945  1427.722222     360.450092
    52   6912.0  1424.103373  1447.473342     360.661306
    53   7040.0  1419.306344  1450.905855     360.525826
    54   7168.0  1420.402884  1459.468296     361.677704
    55   7296.0  1423.264912  1085.044251     362.676097
    56   7424.0  1431.705590  1099.738305     363.026330
    57   7552.0  1431.208138  1110.374999     363.874176
    58   7680.0  1430.924090  1123.693092     363.563967
    59   7808.0  1432.276741  1133.740397     364.471329
    60   7936.0  1432.583504  1141.996420     364.286445
    61   8064.0  1436.181382  1150.412228     365.366353
    62   8192.0  1432.645113  1153.646580     364.214232
    63   8320.0  1382.751385  1119.287478     361.708139
    64   8448.0  1386.577257  1124.503076     362.340592
    65   8576.0  1387.363636  1126.386226     363.490553
    66   8704.0  1379.392631  1132.454971     364.503021
    67   8832.0  1395.886177  1132.296299     365.222963
    68   8960.0  1386.731643  1138.604287     366.087843
    69   9088.0  1395.993817  1138.679947     366.408995
    70   9216.0  1402.015114  1143.889448     367.752168
    71   9344.0  1390.459150  1420.893723     367.708135
    72   9472.0  1398.299643  1428.739362     368.553212
    73   9600.0  1400.442855  1433.999251     369.204143
    74   9728.0  1401.445136  1437.793217     369.920916
    75   9856.0  1397.853184  1440.146133     369.704216
    76   9984.0  1395.418811  1449.911519     370.658126
    77  10112.0  1408.604764  1453.024600     371.673076
    78  10240.0  1408.671539  1462.755905     370.930499
    79  10368.0  1415.536874  1460.782887     369.877344
    80  10496.0  1414.479747  1465.329571     370.835324
    81  10624.0  1407.241170  1464.775597     370.530674
    82  10752.0  1394.846134  1469.658336     371.238671
    83  10880.0  1394.016219  1479.746984     371.476330
    84  11008.0  1420.860384  1477.599141     372.372480
    85  11136.0  1419.465493  1483.030941     373.321142
    86  11264.0  1413.375062  1483.275480     372.691116
    87  11392.0  1420.903213  1489.360636     373.811959
    88  11520.0  1416.110965  1496.064411     373.662723
    89  11648.0  1423.091028  1498.929998     374.843945
    90  11776.0  1436.667177  1503.649639     374.974780
    91  11904.0  1427.385674  1508.234050     375.320529
    92  12032.0  1414.194472  1511.002784     375.938075
    93  12160.0  1415.952890  1514.582943     376.045545
    94  12288.0  1429.137357  1421.075009     376.096633
    95  12416.0  1441.805453  1392.201737     374.565251
    96  12544.0  1444.799815  1391.264909     375.683104
    97  12672.0  1435.340489  1389.587275     375.418272




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.069 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
