
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.061874   690.691516     208.003810
    1     384.0   665.524925   823.339192     263.387059
    2     512.0   811.250577   923.713321     303.034795
    3     640.0   885.519771   969.437842     330.833955
    4     768.0   957.288760  1025.038082     350.868247
    5     896.0  1012.820673  1064.142452     352.619846
    6    1024.0  1048.909233  1107.081632     352.852379
    7    1152.0  1090.053421  1038.395167     350.406078
    8    1280.0  1126.915079  1077.245554     350.269081
    9    1408.0  1169.678115  1103.117869     340.830060
    10   1536.0  1198.998653  1142.453086     333.843846
    11   1664.0  1209.937919  1162.245987     330.462480
    12   1792.0  1234.370506  1189.410427     325.652981
    13   1920.0  1254.743759  1193.814956     325.073084
    14   2048.0  1275.211962  1231.496354     325.408522
    15   2176.0  1231.177199   961.539242     325.154386
    16   2304.0  1253.437819  1003.195915     325.521339
    17   2432.0  1269.684108  1034.962254     326.253468
    18   2560.0  1287.122755  1074.384121     328.074251
    19   2688.0  1287.618761  1103.670306     329.028401
    20   2816.0  1312.059430  1129.401652     329.796023
    21   2944.0  1313.592558  1149.381065     332.062526
    22   3072.0  1318.786343  1176.431165     333.179335
    23   3200.0  1340.530772  1177.615199     335.050478
    24   3328.0  1349.418829  1208.580092     336.509344
    25   3456.0  1354.417559  1227.591382     337.165515
    26   3584.0  1358.396984  1245.833896     338.111138
    27   3712.0  1364.118165  1266.585782     339.999638
    28   3840.0  1364.220447  1285.213759     339.649978
    29   3968.0  1368.924419  1301.913340     341.134403
    30   4096.0  1385.617210  1323.591048     338.538338
    31   4224.0  1323.060347  1300.678843     342.449323
    32   4352.0  1339.460878  1318.801067     345.705287
    33   4480.0  1344.785829  1342.203973     345.733226
    34   4608.0  1350.606765  1353.292315     346.902787
    35   4736.0  1351.364363  1368.064601     348.323908
    36   4864.0  1358.368374  1385.145842     349.173866
    37   4992.0  1366.118566  1394.430625     350.334761
    38   5120.0  1372.578612  1409.863739     350.882974
    39   5248.0  1372.185816  1363.709300     351.450684
    40   5376.0  1367.998855  1381.971253     351.553001
    41   5504.0  1373.065832  1394.132280     353.473258
    42   5632.0  1385.094378  1403.626179     353.306004
    43   5760.0  1383.089437  1422.727488     355.237635
    44   5888.0  1384.446721  1428.476148     355.041337
    45   6016.0  1396.653990  1431.423970     356.681719
    46   6144.0  1403.431534  1444.025328     357.399468
    47   6272.0  1405.490188  1408.463866     357.567160
    48   6400.0  1405.078209  1410.533859     358.530495
    49   6528.0  1409.026779  1433.679045     358.845013
    50   6656.0  1407.239158  1436.299686     359.576716
    51   6784.0  1411.885838  1441.134045     360.528372
    52   6912.0  1419.372373  1461.211806     360.969400
    53   7040.0  1410.700951  1458.259569     361.189717
    54   7168.0  1417.354371  1467.765552     362.180258
    55   7296.0  1420.481993  1086.008806     362.337471
    56   7424.0  1419.955755  1101.608550     363.140041
    57   7552.0  1422.740239  1113.326103     364.011197
    58   7680.0  1425.273139  1124.310216     363.691636
    59   7808.0  1423.205542  1135.344594     364.325976
    60   7936.0  1425.073043  1146.827747     364.345565
    61   8064.0  1427.873982  1153.803824     364.949347
    62   8192.0  1427.019514  1156.725409     364.133643
    63   8320.0  1383.262965  1114.230861     361.489088
    64   8448.0  1385.964384  1122.383637     362.452017
    65   8576.0  1382.901735  1123.984272     363.615416
    66   8704.0  1385.265969  1131.984471     364.382692
    67   8832.0  1396.206400  1129.380788     365.156188
    68   8960.0  1386.859651  1131.868815     366.096748
    69   9088.0  1395.777763  1130.082030     366.895077
    70   9216.0  1399.571293  1129.931047     367.262765
    71   9344.0  1387.306946  1421.492091     367.054887
    72   9472.0  1399.000169  1431.579857     369.046377
    73   9600.0  1401.045544  1427.595393     369.603927
    74   9728.0  1394.463222  1436.402309     369.112428
    75   9856.0  1402.607325  1440.603297     370.263527
    76   9984.0  1393.287068  1448.222389     369.866964
    77  10112.0  1401.783252  1455.124476     370.896482
    78  10240.0  1406.250913  1465.962567     371.758862
    79  10368.0  1409.467966  1458.789300     370.245725
    80  10496.0  1409.212754  1460.438522     370.000528
    81  10624.0  1403.082172  1464.484623     370.459680
    82  10752.0  1388.903889  1471.479154     371.385601
    83  10880.0  1389.315139  1480.070724     371.939321
    84  11008.0  1420.169636  1474.727312     372.948346
    85  11136.0  1411.618960  1481.977200     372.952631
    86  11264.0  1408.823128  1484.003667     372.753137
    87  11392.0  1412.162017  1491.706170     373.930957
    88  11520.0  1408.046573  1494.494730     373.777263
    89  11648.0  1415.199519  1502.213722     374.533759
    90  11776.0  1426.545845  1500.122487     374.557904
    91  11904.0  1423.224518  1506.469872     375.347527
    92  12032.0  1408.896499  1507.572798     375.337575
    93  12160.0  1413.638806  1516.043584     375.872784
    94  12288.0  1420.573394  1419.800724     376.247690
    95  12416.0  1431.742955  1394.362415     374.469368
    96  12544.0  1436.821577  1392.975279     375.538121
    97  12672.0  1426.740936  1394.607091     375.497480




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.273 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
