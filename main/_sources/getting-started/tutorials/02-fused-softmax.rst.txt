
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.397219   694.522072     206.872681
    1     384.0   664.460547   825.353954     264.708636
    2     512.0   807.193856   929.961156     301.791388
    3     640.0   873.023668   960.334596     330.035444
    4     768.0   949.066411  1015.114805     348.779365
    5     896.0  1017.434640  1061.429197     354.264235
    6    1024.0  1051.013139  1096.570846     354.396710
    7    1152.0  1084.779115  1030.771541     348.064541
    8    1280.0  1135.356321  1068.539327     349.067104
    9    1408.0  1160.909092  1109.616801     339.911601
    10   1536.0  1195.620398  1133.359220     333.378577
    11   1664.0  1216.987250  1168.029454     330.784101
    12   1792.0  1237.273399  1194.517035     325.704200
    13   1920.0  1262.900976  1196.963264     324.608540
    14   2048.0  1276.203872  1229.638393     324.574579
    15   2176.0  1232.904039   961.985554     325.420419
    16   2304.0  1248.079264  1005.351713     325.857611
    17   2432.0  1268.609692  1039.029291     326.453579
    18   2560.0  1285.811020  1067.840837     327.800239
    19   2688.0  1293.262794  1099.422472     328.305346
    20   2816.0  1311.009955  1125.483937     329.701176
    21   2944.0  1311.852796  1148.416724     331.659115
    22   3072.0  1321.064159  1174.904059     333.541308
    23   3200.0  1339.842630  1176.979807     335.130756
    24   3328.0  1341.233559  1203.377151     336.313569
    25   3456.0  1348.724484  1228.602615     337.264685
    26   3584.0  1352.218099  1247.036366     337.936981
    27   3712.0  1367.940534  1268.133872     340.424976
    28   3840.0  1368.086243  1285.296167     340.316471
    29   3968.0  1367.628640  1302.837066     340.607848
    30   4096.0  1382.639230  1314.897574     338.820140
    31   4224.0  1323.349690  1293.901202     342.955934
    32   4352.0  1334.459065  1317.438986     345.135051
    33   4480.0  1339.914620  1341.076402     345.981728
    34   4608.0  1347.632678  1353.127282     346.969959
    35   4736.0  1355.658863  1366.195879     348.099561
    36   4864.0  1367.165051  1375.749884     348.795920
    37   4992.0  1367.413263  1393.991547     350.183060
    38   5120.0  1366.540636  1408.623171     350.912185
    39   5248.0  1370.623910  1351.956275     351.434899
    40   5376.0  1373.436200  1379.270945     351.832267
    41   5504.0  1373.350392  1397.274166     353.736540
    42   5632.0  1385.560980  1411.172822     353.478078
    43   5760.0  1386.898067  1415.450809     355.214351
    44   5888.0  1386.572484  1424.422506     354.902498
    45   6016.0  1395.551734  1440.926847     356.614542
    46   6144.0  1401.886720  1450.427895     357.047125
    47   6272.0  1403.650309  1396.398634     357.548696
    48   6400.0  1403.443820  1412.325227     358.743465
    49   6528.0  1409.252766  1426.950598     358.849612
    50   6656.0  1407.896286  1430.029068     359.475573
    51   6784.0  1411.603089  1447.163976     360.528371
    52   6912.0  1415.366443  1446.410420     360.463853
    53   7040.0  1413.013170  1456.128726     361.226200
    54   7168.0  1415.063635  1468.838453     361.892261
    55   7296.0  1421.875754  1085.879694     362.401486
    56   7424.0  1423.955554  1100.405200     363.049066
    57   7552.0  1421.725372  1114.929263     363.136029
    58   7680.0  1429.783132  1124.484377     363.713065
    59   7808.0  1424.595552  1136.863973     364.353221
    60   7936.0  1427.635202  1146.808868     364.568389
    61   8064.0  1430.978848  1152.690073     364.863344
    62   8192.0  1430.267836  1155.474936     364.030201
    63   8320.0  1382.098982  1111.956937     361.747986
    64   8448.0  1385.013348  1122.584688     362.411894
    65   8576.0  1388.567993  1124.201123     363.503928
    66   8704.0  1382.540777  1129.082461     364.462903
    67   8832.0  1397.944600  1128.576955     364.987136
    68   8960.0  1385.296885  1131.851263     366.101200
    69   9088.0  1396.800552  1131.597969     366.719984
    70   9216.0  1398.349929  1131.958732     367.533831
    71   9344.0  1389.804041  1419.024585     367.738733
    72   9472.0  1397.866264  1431.702322     368.672383
    73   9600.0  1394.661631  1432.441936     369.114255
    74   9728.0  1396.847999  1437.014381     370.189837
    75   9856.0  1398.696423  1439.722805     369.948005
    76   9984.0  1392.091985  1452.868582     370.711104
    77  10112.0  1403.934173  1454.398449     371.437536
    78  10240.0  1405.897490  1464.626392     371.200307
    79  10368.0  1409.821313  1462.969320     370.205742
    80  10496.0  1401.807940  1462.831648     370.475188
    81  10624.0  1400.155151  1461.414066     370.641652
    82  10752.0  1397.923822  1470.950594     371.532648
    83  10880.0  1392.959100  1480.261944     372.222090
    84  11008.0  1412.093770  1475.268315     371.970434
    85  11136.0  1417.470165  1483.648733     373.036925
    86  11264.0  1411.636528  1487.911233     373.067988
    87  11392.0  1415.298604  1492.869799     374.372350
    88  11520.0  1409.211628  1496.063583     373.548251
    89  11648.0  1417.793360  1497.462365     374.653341
    90  11776.0  1428.307674  1501.930813     374.872848
    91  11904.0  1429.239888  1508.263331     375.725977
    92  12032.0  1410.752922  1511.367100     375.818706
    93  12160.0  1408.492675  1515.315035     375.903781
    94  12288.0  1422.166973  1423.587143     375.763854
    95  12416.0  1430.999425  1395.410530     374.196039
    96  12544.0  1439.230758  1392.666887     375.810606
    97  12672.0  1428.133638  1389.117649     375.501881




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.199 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
