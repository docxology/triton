
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.921224   702.332727     206.246841
    1     384.0   665.604651   822.084507     264.477661
    2     512.0   808.447931   947.821453     304.767777
    3     640.0   886.471213   959.461843     332.747796
    4     768.0   961.203596  1017.679917     349.507840
    5     896.0  1015.163444  1074.320573     353.213930
    6    1024.0  1047.758981  1094.116630     351.700187
    7    1152.0  1089.677618  1027.235272     350.000246
    8    1280.0  1138.368805  1077.087990     350.389747
    9    1408.0  1158.206842  1103.197023     340.968496
    10   1536.0  1188.409983  1142.186084     332.457356
    11   1664.0  1211.414592  1169.289620     329.394396
    12   1792.0  1235.418287  1188.101755     326.156354
    13   1920.0  1253.045485  1192.247286     324.706703
    14   2048.0  1275.121657  1224.154771     324.691082
    15   2176.0  1229.877471   966.574091     325.302847
    16   2304.0  1255.587689   998.341926     326.139518
    17   2432.0  1264.943399  1031.796565     326.461762
    18   2560.0  1285.274664  1069.919458     328.175140
    19   2688.0  1296.949902  1100.539778     329.159654
    20   2816.0  1304.256698  1124.967777     329.726952
    21   2944.0  1314.469958  1144.452758     331.632212
    22   3072.0  1317.170582  1177.276356     333.376529
    23   3200.0  1339.424610  1174.608457     334.876565
    24   3328.0  1342.794615  1204.925508     336.242683
    25   3456.0  1348.844217  1227.804195     336.849473
    26   3584.0  1360.779679  1248.446980     337.837876
    27   3712.0  1360.216524  1264.786329     340.489514
    28   3840.0  1364.860634  1285.872444     340.042944
    29   3968.0  1370.332601  1303.142798     340.994022
    30   4096.0  1382.810505  1316.548505     338.436777
    31   4224.0  1323.890253  1298.265656     342.945767
    32   4352.0  1335.373055  1321.119707     345.335434
    33   4480.0  1342.424015  1339.943873     345.694726
    34   4608.0  1353.752314  1360.034494     346.859277
    35   4736.0  1349.309574  1369.026797     347.988056
    36   4864.0  1361.674015  1383.240286     349.080075
    37   4992.0  1364.184249  1392.614394     350.050429
    38   5120.0  1367.984461  1409.308961     350.580159
    39   5248.0  1366.048757  1365.862112     351.822795
    40   5376.0  1378.520710  1372.979027     352.159083
    41   5504.0  1371.669284  1396.199623     353.647167
    42   5632.0  1386.465818  1408.662204     353.096949
    43   5760.0  1387.555619  1423.113452     355.065395
    44   5888.0  1386.356250  1432.495447     354.785991
    45   6016.0  1393.176124  1431.890206     356.633933
    46   6144.0  1402.652546  1449.886867     356.658503
    47   6272.0  1401.229806  1397.614220     357.682597
    48   6400.0  1406.887340  1405.988752     358.831927
    49   6528.0  1411.612297  1429.983306     359.301012
    50   6656.0  1405.931702  1430.214849     359.659516
    51   6784.0  1410.500433  1444.426305     360.059197
    52   6912.0  1421.224865  1451.671241     360.753220
    53   7040.0  1415.879472  1452.365236     361.044007
    54   7168.0  1417.249356  1464.347854     361.584826
    55   7296.0  1419.997254  1087.632979     362.456375
    56   7424.0  1424.933011  1100.284192     362.926322
    57   7552.0  1423.916156  1113.753004     363.536623
    58   7680.0  1428.547820  1124.922420     363.263395
    59   7808.0  1430.944453  1136.850985     364.335058
    60   7936.0  1426.838764  1145.227450     364.444729
    61   8064.0  1433.829236  1153.572487     364.904077
    62   8192.0  1429.565586  1155.133741     364.276936
    63   8320.0  1382.447764  1112.764370     361.810634
    64   8448.0  1381.305366  1122.757333     362.327227
    65   8576.0  1385.915742  1123.291953     363.619878
    66   8704.0  1380.859070  1131.371134     364.748381
    67   8832.0  1394.351924  1130.401401     365.271947
    68   8960.0  1383.343691  1132.326806     366.056686
    69   9088.0  1394.105572  1129.853949     366.643591
    70   9216.0  1402.092019  1132.320838     367.347153
    71   9344.0  1386.480317  1418.687381     367.891043
    72   9472.0  1400.429178  1428.543660     368.655293
    73   9600.0  1400.354552  1431.615839     369.047070
    74   9728.0  1396.756761  1441.488540     369.598236
    75   9856.0  1397.633697  1439.446366     370.272491
    76   9984.0  1394.014987  1447.449463     370.125842
    77  10112.0  1402.489747  1452.832892     371.047109
    78  10240.0  1401.882408  1465.954516     371.004661
    79  10368.0  1409.373169  1458.737706     370.050346
    80  10496.0  1405.686732  1465.420263     369.872091
    81  10624.0  1404.922805  1463.733419     370.282321
    82  10752.0  1393.136169  1470.925934     370.749744
    83  10880.0  1390.500764  1477.738989     372.235355
    84  11008.0  1414.561857  1476.776356     372.279624
    85  11136.0  1419.526200  1483.150430     372.855074
    86  11264.0  1406.208295  1486.471801     373.294477
    87  11392.0  1414.197467  1492.453495     373.979459
    88  11520.0  1410.754310  1495.919771     373.722625
    89  11648.0  1416.317837  1498.105672     374.666633
    90  11776.0  1427.489221  1500.127385     374.699786
    91  11904.0  1422.313946  1507.090581     375.624005
    92  12032.0  1413.526977  1508.431601     375.240614
    93  12160.0  1410.635918  1515.877520     375.536574
    94  12288.0  1423.664013  1422.561296     375.653057
    95  12416.0  1429.606421  1394.577402     374.905601
    96  12544.0  1437.964039  1393.515056     375.705081
    97  12672.0  1428.203496  1388.433885     375.550304




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.244 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
