
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   463.624344   694.798049     206.743080
    1     384.0   664.457266   815.463018     261.049304
    2     512.0   811.684421   931.828333     302.370059
    3     640.0   912.019818   906.222144     329.069864
    4     768.0   976.395091   990.077483     348.285634
    5     896.0  1043.528083  1045.804047     355.979269
    6    1024.0  1081.741623  1076.045213     353.718040
    7    1152.0  1102.540237  1078.664267     349.065806
    8    1280.0  1130.945831  1111.932346     348.914744
    9    1408.0  1169.546202  1140.630859     341.456520
    10   1536.0  1199.609521  1166.746227     332.329695
    11   1664.0  1217.795814  1189.432208     328.732770
    12   1792.0  1235.036969  1191.157353     324.753652
    13   1920.0  1260.946008  1219.163521     323.963352
    14   2048.0  1273.343790  1251.072899     324.479227
    15   2176.0  1238.046660   958.609696     325.803373
    16   2304.0  1257.918470  1001.410352     326.253094
    17   2432.0  1272.264241  1033.305783     327.428079
    18   2560.0  1283.884193  1068.013892     328.189914
    19   2688.0  1294.171832  1097.263218     329.608124
    20   2816.0  1313.438366  1122.056369     330.146849
    21   2944.0  1320.970852  1141.584130     331.644001
    22   3072.0  1318.674865  1169.172226     333.291700
    23   3200.0  1334.589752  1172.361519     334.785024
    24   3328.0  1341.316332  1203.521442     335.913342
    25   3456.0  1347.690482  1224.737340     336.917730
    26   3584.0  1359.087842  1246.313457     338.770084
    27   3712.0  1366.807393  1268.758571     340.491086
    28   3840.0  1370.688456  1280.790594     340.584362
    29   3968.0  1374.184009  1303.326515     341.209384
    30   4096.0  1385.531638  1319.031279     338.692312
    31   4224.0  1335.204691  1276.430739     343.304511
    32   4352.0  1341.285814  1298.924494     345.602540
    33   4480.0  1345.551652  1320.073660     345.645675
    34   4608.0  1358.208116  1333.243272     346.459501
    35   4736.0  1355.448025  1343.746236     347.836630
    36   4864.0  1365.876380  1362.122782     348.660417
    37   4992.0  1368.762285  1374.903624     350.705084
    38   5120.0  1379.613185  1384.509359     351.005295
    39   5248.0  1377.972648  1346.658311     351.523825
    40   5376.0  1379.198285  1367.264468     352.247333
    41   5504.0  1387.164625  1383.918532     353.670683
    42   5632.0  1392.722824  1393.144507     352.813960
    43   5760.0  1393.383154  1399.798087     355.130546
    44   5888.0  1386.725439  1413.255114     354.577348
    45   6016.0  1402.996074  1423.812421     356.564585
    46   6144.0  1405.197082  1425.914858     356.533767
    47   6272.0  1407.288178  1397.839241     357.527310
    48   6400.0  1408.168813  1399.979697     358.918586
    49   6528.0  1414.427441  1412.159738     358.895861
    50   6656.0  1415.960995  1432.019664     359.250497
    51   6784.0  1418.993973  1430.003925     360.468506
    52   6912.0  1423.024301  1442.243095     360.648879
    53   7040.0  1420.925508  1448.076579     360.860410
    54   7168.0  1421.771520  1457.229230     361.874655
    55   7296.0  1426.028307  1086.266641     362.131854
    56   7424.0  1429.774078  1101.489661     362.780954
    57   7552.0  1427.215592  1108.133194     362.990574
    58   7680.0  1432.023951  1121.284925     364.152895
    59   7808.0  1429.942940  1130.124634     364.221575
    60   7936.0  1436.104658  1140.963592     364.674821
    61   8064.0  1437.665092  1147.249769     364.836192
    62   8192.0  1434.370908  1151.288658     364.115739
    63   8320.0  1382.630511  1118.303990     361.601919
    64   8448.0  1385.560498  1121.763539     362.393946
    65   8576.0  1390.180870  1129.794362     363.530680
    66   8704.0  1385.608179  1134.264555     364.391601
    67   8832.0  1392.848620  1134.332437     364.467610
    68   8960.0  1382.724192  1140.646339     365.687633
    69   9088.0  1401.021770  1138.679950     366.267003
    70   9216.0  1404.189723  1144.468656     367.783031
    71   9344.0  1390.519301  1421.198273     367.873116
    72   9472.0  1397.957184  1426.626060     368.193194
    73   9600.0  1403.100291  1432.223016     368.876080
    74   9728.0  1396.890778  1438.815116     369.391154
    75   9856.0  1396.132874  1441.057235     369.784243
    76   9984.0  1391.352818  1451.790009     369.599538
    77  10112.0  1402.903552  1451.024402     371.181144
    78  10240.0  1411.869543  1463.185013     370.834930
    79  10368.0  1420.571821  1461.517381     369.474297
    80  10496.0  1406.702786  1466.158521     369.801267
    81  10624.0  1406.674836  1468.544263     371.157318
    82  10752.0  1396.154128  1469.833427     371.804768
    83  10880.0  1393.152960  1475.657635     372.195562
    84  11008.0  1418.803613  1476.087590     372.332680
    85  11136.0  1419.992769  1481.763612     372.952630
    86  11264.0  1416.056714  1484.020227     372.753136
    87  11392.0  1423.503102  1487.004703     373.525793
    88  11520.0  1414.733463  1494.396916     373.645108
    89  11648.0  1422.053417  1496.316017     374.126866
    90  11776.0  1436.423184  1502.764495     375.010526
    91  11904.0  1429.196290  1507.647740     375.187180
    92  12032.0  1411.401818  1511.803664     375.580193
    93  12160.0  1413.261127  1513.201167     375.540994
    94  12288.0  1425.598986  1416.003013     375.919077
    95  12416.0  1437.499197  1393.129720     374.698917
    96  12544.0  1442.061073  1392.216996     375.647945
    97  12672.0  1437.842088  1391.593429     374.777035




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.256 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
