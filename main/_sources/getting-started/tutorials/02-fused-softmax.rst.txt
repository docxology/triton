
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   478.305780   693.262777     206.876461
    1     384.0   665.402967   821.271190     263.144718
    2     512.0   806.973150   938.242446     301.546011
    3     640.0   882.665657   919.741609     328.348938
    4     768.0   955.268615   983.245200     347.723764
    5     896.0  1018.857534  1039.535091     355.371275
    6    1024.0  1062.332838  1066.613935     355.107846
    7    1152.0  1100.633640  1066.135861     346.658500
    8    1280.0  1124.367226  1113.791612     348.382832
    9    1408.0  1165.335294  1139.590738     339.791741
    10   1536.0  1196.056273  1165.615530     333.195476
    11   1664.0  1219.399605  1191.570055     330.280096
    12   1792.0  1239.141299  1200.619722     326.199382
    13   1920.0  1258.479135  1216.897173     324.172849
    14   2048.0  1267.300277  1241.718508     324.649935
    15   2176.0  1228.727157   960.966861     325.614856
    16   2304.0  1252.609510  1001.466951     326.055030
    17   2432.0  1275.146620  1036.802073     326.675282
    18   2560.0  1285.256402  1068.944290     327.634215
    19   2688.0  1294.482267  1096.549331     329.092488
    20   2816.0  1310.170681  1118.475344     329.310063
    21   2944.0  1312.711491  1146.115941     331.285666
    22   3072.0  1318.283728  1169.058670     333.555422
    23   3200.0  1336.686956  1173.495541     334.542542
    24   3328.0  1340.382948  1205.724720     335.772145
    25   3456.0  1350.599098  1221.847972     336.768094
    26   3584.0  1354.745544  1246.244346     338.383261
    27   3712.0  1361.499220  1264.120996     339.932895
    28   3840.0  1371.156142  1282.504875     340.436671
    29   3968.0  1367.966688  1298.640743     340.829922
    30   4096.0  1386.232220  1317.207281     338.399071
    31   4224.0  1327.685703  1277.456005     343.253708
    32   4352.0  1337.290053  1301.532712     345.523889
    33   4480.0  1338.842583  1315.544475     345.793363
    34   4608.0  1351.279404  1332.178954     346.592842
    35   4736.0  1354.909129  1342.558455     347.900998
    36   4864.0  1364.003877  1351.098504     348.788623
    37   4992.0  1366.109480  1375.537255     350.557812
    38   5120.0  1369.191601  1389.765697     350.911210
    39   5248.0  1365.365229  1346.172946     351.804018
    40   5376.0  1373.866662  1369.458000     351.832079
    41   5504.0  1375.277431  1378.249490     353.238517
    42   5632.0  1390.507087  1394.928701     353.591198
    43   5760.0  1385.252004  1409.813061     354.939809
    44   5888.0  1384.759881  1410.065546     355.194721
    45   6016.0  1392.836372  1422.169857     356.424687
    46   6144.0  1405.100893  1430.376796     356.787949
    47   6272.0  1400.747564  1399.268818     358.154371
    48   6400.0  1407.828020  1406.524385     358.604352
    49   6528.0  1410.076899  1418.503454     359.231847
    50   6656.0  1413.170580  1422.905591     359.802341
    51   6784.0  1413.180487  1443.416200     360.413266
    52   6912.0  1418.303798  1443.274145     360.909579
    53   7040.0  1411.286087  1447.803515     360.649503
    54   7168.0  1417.816645  1458.977269     361.933374
    55   7296.0  1420.420354  1085.359506     362.442649
    56   7424.0  1425.360318  1098.052208     362.849081
    57   7552.0  1418.267263  1109.542204     363.163313
    58   7680.0  1426.848530  1123.582481     363.771876
    59   7808.0  1431.137378  1131.903728     364.771489
    60   7936.0  1427.991486  1141.920136     364.846213
    61   8064.0  1429.628814  1149.965863     364.953873
    62   8192.0  1425.860747  1153.028935     364.152109
    63   8320.0  1385.378178  1114.616869     362.002941
    64   8448.0  1385.914151  1123.639408     362.456475
    65   8576.0  1383.241369  1126.737008     363.499470
    66   8704.0  1382.528974  1135.273122     364.209023
    67   8832.0  1395.491351  1133.819423     365.058296
    68   8960.0  1383.418213  1140.634557     365.173092
    69   9088.0  1395.289702  1136.423659     366.337985
    70   9216.0  1400.200846  1144.206934     366.958109
    71   9344.0  1388.251431  1420.264144     367.517606
    72   9472.0  1399.929731  1432.448619     369.086420
    73   9600.0  1399.331921  1429.010822     369.100817
    74   9728.0  1400.553616  1439.594738     369.537322
    75   9856.0  1401.171582  1440.949758     369.672946
    76   9984.0  1388.329965  1445.547206     370.830874
    77  10112.0  1402.459201  1451.809296     370.822938
    78  10240.0  1402.872630  1467.965328     371.138348
    79  10368.0  1412.703356  1462.609106     370.112488
    80  10496.0  1409.333927  1465.961924     370.337545
    81  10624.0  1400.695590  1467.321518     371.126296
    82  10752.0  1391.272146  1469.295573     371.229770
    83  10880.0  1390.613004  1476.182707     371.511566
    84  11008.0  1417.432504  1473.435868     372.385751
    85  11136.0  1416.500854  1481.603535     372.615833
    86  11264.0  1409.975868  1486.236422     373.134575
    87  11392.0  1417.214733  1489.448330     373.860430
    88  11520.0  1413.614772  1497.459421     373.711172
    89  11648.0  1414.499271  1498.963142     374.378859
    90  11776.0  1426.465631  1503.624850     375.194392
    91  11904.0  1427.282775  1509.597252     375.740068
    92  12032.0  1414.498505  1508.709779     375.902698
    93  12160.0  1415.121528  1515.869982     376.041112
    94  12288.0  1424.815154  1420.451984     376.034473
    95  12416.0  1434.899367  1397.236646     375.010448
    96  12544.0  1440.287051  1395.789943     375.494208
    97  12672.0  1425.762440  1391.567417     375.479872




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.395 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
