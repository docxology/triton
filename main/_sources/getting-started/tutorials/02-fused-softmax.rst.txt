
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.649761   705.677894     205.995166
    1     384.0   664.003657   819.918046     262.669669
    2     512.0   810.356030   919.900017     303.821272
    3     640.0   889.627552   917.647050     330.964935
    4     768.0   963.304013   978.849836     349.879598
    5     896.0  1011.698339  1041.713067     355.494910
    6    1024.0  1051.685337  1070.015007     354.079629
    7    1152.0  1097.962838  1074.480017     349.030358
    8    1280.0  1138.310668  1104.436295     350.109531
    9    1408.0  1158.206844  1132.853666     341.435348
    10   1536.0  1197.366271  1158.554326     332.831461
    11   1664.0  1218.159985  1190.490036     329.179031
    12   1792.0  1230.661706  1200.034597     325.760345
    13   1920.0  1258.650247  1226.666691     324.787668
    14   2048.0  1276.056979  1244.371090     324.472714
    15   2176.0  1228.315984   963.107028     325.650352
    16   2304.0  1257.614404  1001.988832     326.144529
    17   2432.0  1272.334884  1033.623415     326.423476
    18   2560.0  1289.537208  1066.897173     328.126931
    19   2688.0  1292.837335  1095.948576     329.454404
    20   2816.0  1314.403373  1125.516628     329.033227
    21   2944.0  1314.842663  1146.633037     331.510439
    22   3072.0  1324.422331  1169.335843     333.244604
    23   3200.0  1335.418298  1173.861081     334.706663
    24   3328.0  1348.175845  1203.459862     336.294687
    25   3456.0  1350.967834  1220.635419     337.382657
    26   3584.0  1355.815507  1241.967143     338.566089
    27   3712.0  1366.421863  1262.697675     340.169645
    28   3840.0  1372.418754  1284.195347     340.580448
    29   3968.0  1370.654379  1301.780441     341.397477
    30   4096.0  1385.880147  1318.186455     339.158870
    31   4224.0  1325.292503  1276.420904     343.463115
    32   4352.0  1335.296450  1297.158441     345.271096
    33   4480.0  1336.782367  1319.496294     345.811258
    34   4608.0  1357.608095  1335.690069     347.121493
    35   4736.0  1348.313637  1344.625783     347.962117
    36   4864.0  1363.854665  1358.546309     349.143112
    37   4992.0  1362.200006  1374.682980     350.576806
    38   5120.0  1370.199095  1389.536306     351.010024
    39   5248.0  1372.198615  1354.988488     351.528543
    40   5376.0  1373.651620  1373.385752     352.170831
    41   5504.0  1376.157183  1383.721649     353.946560
    42   5632.0  1394.065759  1397.540490     353.454815
    43   5760.0  1389.013382  1400.259265     355.102620
    44   5888.0  1383.359038  1411.673968     354.919974
    45   6016.0  1394.953788  1426.407282     356.942836
    46   6144.0  1402.632329  1427.199203     356.963779
    47   6272.0  1405.484147  1401.495751     357.844342
    48   6400.0  1409.997843  1404.290139     358.729056
    49   6528.0  1407.464693  1418.190612     359.333299
    50   6656.0  1412.395546  1419.633076     359.705530
    51   6784.0  1420.590868  1434.933204     360.422473
    52   6912.0  1416.510841  1453.494875     360.992413
    53   7040.0  1413.971167  1452.597841     360.704500
    54   7168.0  1418.074528  1461.727901     361.943729
    55   7296.0  1419.619291  1086.838748     362.561624
    56   7424.0  1421.714675  1097.850828     362.903601
    57   7552.0  1425.389974  1111.061027     363.436392
    58   7680.0  1429.010296  1122.041103     363.778318
    59   7808.0  1427.692700  1131.710259     365.003769
    60   7936.0  1433.436040  1143.986717     365.051438
    61   8064.0  1430.078341  1147.796644     365.121472
    62   8192.0  1427.103648  1153.907494     364.124692
    63   8320.0  1385.833829  1117.010009     362.020842
    64   8448.0  1380.095273  1125.134977     362.634899
    65   8576.0  1388.524766  1127.894710     363.334594
    66   8704.0  1383.625478  1132.914728     364.458447
    67   8832.0  1397.097528  1132.322624     365.249680
    68   8960.0  1391.080189  1139.878567     365.204102
    69   9088.0  1398.846901  1137.774038     367.133975
    70   9216.0  1399.838165  1144.911119     367.511598
    71   9344.0  1388.659742  1417.748954     368.003118
    72   9472.0  1399.967565  1433.140741     368.968582
    73   9600.0  1397.088691  1435.290455     369.235251
    74   9728.0  1398.895287  1440.043789     369.887708
    75   9856.0  1395.064987  1439.701276     370.582290
    76   9984.0  1390.675891  1451.358807     370.051537
    77  10112.0  1403.009598  1455.301134     370.918625
    78  10240.0  1406.005692  1465.406980     371.821026
    79  10368.0  1410.530021  1461.668109     370.112490
    80  10496.0  1403.524473  1468.324856     370.777477
    81  10624.0  1401.806383  1462.580220     370.859363
    82  10752.0  1388.541063  1471.120258     370.868414
    83  10880.0  1389.848376  1476.133420     372.160197
    84  11008.0  1415.810121  1477.345166     373.312502
    85  11136.0  1416.117321  1485.129705     372.855073
    86  11264.0  1407.228090  1484.833539     373.254489
    87  11392.0  1417.778367  1490.451150     374.094151
    88  11520.0  1411.692626  1495.007850     373.587866
    89  11648.0  1420.468393  1498.343230     374.480634
    90  11776.0  1429.869211  1502.174189     375.054957
    91  11904.0  1424.137345  1508.307469     375.673044
    92  12032.0  1409.704566  1508.932442     375.955767
    93  12160.0  1404.630125  1516.203429     375.536574
    94  12288.0  1426.904621  1415.933461     376.154377
    95  12416.0  1431.503030  1398.679486     374.835898
    96  12544.0  1435.552008  1396.924006     375.481036
    97  12672.0  1428.688740  1391.277908     375.554708




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.199 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
