
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.558736   699.399604     206.277556
    1     384.0   655.212937   828.738137     261.930009
    2     512.0   803.309631   929.158164     301.276156
    3     640.0   912.775431   908.217774     329.429672
    4     768.0   986.212436   987.105567     348.121143
    5     896.0  1040.031950  1030.208428     357.173231
    6    1024.0  1078.829984  1079.792539     354.138730
    7    1152.0  1093.035598  1074.056307     349.879381
    8    1280.0  1139.947403  1113.475712     349.822350
    9    1408.0  1171.931914  1138.983079     341.930001
    10   1536.0  1187.860835  1167.007310     332.183421
    11   1664.0  1216.722094  1190.451449     329.819272
    12   1792.0  1235.399491  1200.593270     325.584442
    13   1920.0  1260.875379  1227.933846     324.350324
    14   2048.0  1274.965549  1243.388849     324.627256
    15   2176.0  1229.519717   963.861234     325.862098
    16   2304.0  1255.946754  1004.389737     326.224244
    17   2432.0  1278.008655  1037.684394     327.118648
    18   2560.0  1289.248164  1071.969447     328.325424
    19   2688.0  1292.761329  1101.665330     328.831494
    20   2816.0  1313.236287  1125.000288     329.368927
    21   2944.0  1319.553063  1147.046257     331.472032
    22   3072.0  1317.918250  1165.471382     333.282086
    23   3200.0  1334.340803  1168.576752     334.502555
    24   3328.0  1348.798408  1199.662475     336.133250
    25   3456.0  1352.184542  1224.021517     337.035803
    26   3584.0  1360.232471  1245.086557     338.143009
    27   3712.0  1365.374412  1260.484517     340.743796
    28   3840.0  1370.120103  1279.198487     340.639094
    29   3968.0  1377.568096  1296.843091     341.700755
    30   4096.0  1385.048502  1313.843383     338.889040
    31   4224.0  1333.048526  1279.308647     342.770999
    32   4352.0  1338.717377  1297.490684     345.271096
    33   4480.0  1346.137825  1311.767795     345.416580
    34   4608.0  1360.448166  1329.258301     346.356349
    35   4736.0  1355.131320  1343.036266     347.934884
    36   4864.0  1361.719729  1355.425225     348.913204
    37   4992.0  1374.470347  1377.201266     350.306188
    38   5120.0  1377.208098  1383.339609     350.635530
    39   5248.0  1376.389874  1354.988489     351.615292
    40   5376.0  1373.313183  1367.534571     351.531163
    41   5504.0  1381.229927  1378.746873     353.576644
    42   5632.0  1394.052979  1394.547195     353.022679
    43   5760.0  1397.343248  1407.785991     354.972360
    44   5888.0  1391.379708  1405.124983     354.702504
    45   6016.0  1403.647599  1412.312938     356.373576
    46   6144.0  1404.342853  1437.532969     357.005446
    47   6272.0  1409.871356  1392.347426     357.881333
    48   6400.0  1415.171308  1416.195459     358.895462
    49   6528.0  1415.624861  1416.946954     358.693271
    50   6656.0  1413.623357  1420.989580     359.300999
    51   6784.0  1419.025416  1431.779451     360.160290
    52   6912.0  1422.166055  1444.584889     360.592403
    53   7040.0  1420.620489  1450.368743     360.814542
    54   7168.0  1421.064691  1449.762129     361.382682
    55   7296.0  1423.900128  1084.594639     362.634877
    56   7424.0  1431.427829  1100.637271     362.640241
    57   7552.0  1426.425904  1107.889237     363.072377
    58   7680.0  1429.036381  1119.106818     363.988352
    59   7808.0  1432.442297  1131.149578     364.389553
    60   7936.0  1430.308384  1146.205191     365.013717
    61   8064.0  1438.699339  1148.307444     365.352738
    62   8192.0  1428.811523  1154.468639     364.388963
    63   8320.0  1382.487575  1116.684855     361.953727
    64   8448.0  1384.876304  1121.003413     362.077904
    65   8576.0  1390.685372  1126.096440     363.134272
    66   8704.0  1381.495600  1132.116302     364.066650
    67   8832.0  1396.136355  1131.609052     364.991581
    68   8960.0  1382.996118  1138.185002     364.443691
    69   9088.0  1394.619477  1138.315144     367.093869
    70   9216.0  1406.935452  1142.109073     367.462693
    71   9344.0  1393.834303  1419.965868     367.702913
    72   9472.0  1399.210623  1427.508597     368.380252
    73   9600.0  1404.475048  1432.876331     368.149133
    74   9728.0  1392.922985  1441.390528     369.607191
    75   9856.0  1402.066257  1439.919408     369.311475
    76   9984.0  1395.818579  1449.582588     369.715376
    77  10112.0  1405.507072  1455.143644     371.220038
    78  10240.0  1408.409148  1464.624310     371.156049
    79  10368.0  1416.556022  1462.739879     369.363723
    80  10496.0  1412.092142  1468.018033     370.559600
    81  10624.0  1407.577791  1462.203182     371.157463
    82  10752.0  1396.813321  1468.839505     371.100753
    83  10880.0  1396.812457  1480.384219     371.573242
    84  11008.0  1417.480007  1479.161409     372.005742
    85  11136.0  1419.876016  1479.381578     372.186860
    86  11264.0  1411.332873  1485.074852     372.917148
    87  11392.0  1421.395816  1490.939553     373.578590
    88  11520.0  1419.223089  1494.625183     373.357483
    89  11648.0  1420.682418  1498.912898     374.095943
    90  11776.0  1435.284359  1502.514960     374.881729
    91  11904.0  1429.155953  1508.003620     375.280701
    92  12032.0  1411.771697  1508.964978     375.778934
    93  12160.0  1409.251638  1516.060301     375.598463
    94  12288.0  1427.480594  1420.528066     375.994518
    95  12416.0  1432.275718  1393.134636     374.716587
    96  12544.0  1442.725381  1391.775099     375.244107
    97  12672.0  1436.011829  1388.905159     375.501880




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.134 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
