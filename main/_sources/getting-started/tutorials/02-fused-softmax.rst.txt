
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   478.584399   707.077673     208.037221
    1     384.0   664.517555   834.101152     262.906979
    2     512.0   810.914294   916.055355     303.384934
    3     640.0   875.939019   922.749492     330.621921
    4     768.0   964.655977   992.672212     350.727819
    5     896.0  1026.140488  1029.945503     354.845545
    6    1024.0  1051.939170  1068.857285     354.719983
    7    1152.0  1097.142842  1070.655991     348.701646
    8    1280.0  1132.182800  1102.090694     347.855623
    9    1408.0  1156.010503  1138.575863     340.538982
    10   1536.0  1186.419734  1164.931193     334.060669
    11   1664.0  1209.883573  1184.395239     329.712560
    12   1792.0  1235.827000  1202.559459     326.174583
    13   1920.0  1253.155452  1225.847445     324.696893
    14   2048.0  1269.686792  1251.946019     324.973945
    15   2176.0  1239.835441   963.598320     326.180185
    16   2304.0  1256.238376  1003.747303     326.270511
    17   2432.0  1273.582185  1035.493100     326.674848
    18   2560.0  1279.494456  1070.818328     327.740085
    19   2688.0  1287.690823  1095.825486     329.382152
    20   2816.0  1300.877912  1125.775328     329.202626
    21   2944.0  1318.167730  1143.491719     331.861072
    22   3072.0  1322.446529  1174.382408     333.668927
    23   3200.0  1334.951694  1171.273198     335.214851
    24   3328.0  1339.998823  1200.182470     336.339602
    25   3456.0  1351.381952  1227.187911     337.575241
    26   3584.0  1359.420940  1249.107146     338.517391
    27   3712.0  1365.255255  1267.234106     340.534104
    28   3840.0  1366.076935  1285.284867     340.782390
    29   3968.0  1374.183202  1302.109302     340.731282
    30   4096.0  1381.483471  1314.350465     338.620032
    31   4224.0  1324.130209  1274.664824     342.856949
    32   4352.0  1337.949056  1298.609775     345.828570
    33   4480.0  1338.197075  1317.065995     345.615250
    34   4608.0  1358.321982  1333.923366     347.062231
    35   4736.0  1353.212681  1343.382935     348.270756
    36   4864.0  1360.915634  1362.140429     349.164255
    37   4992.0  1366.382690  1373.157563     350.349831
    38   5120.0  1366.417789  1388.569461     350.869047
    39   5248.0  1368.751984  1355.601543     351.533257
    40   5376.0  1373.053537  1362.261833     351.684607
    41   5504.0  1373.421021  1376.636208     353.694201
    42   5632.0  1385.953134  1394.868039     353.324597
    43   5760.0  1386.466703  1400.759987     354.786435
    44   5888.0  1386.670935  1419.329591     354.860428
    45   6016.0  1396.854886  1419.454776     356.771679
    46   6144.0  1401.847256  1427.784548     357.065654
    47   6272.0  1402.283559  1393.323765     358.010858
    48   6400.0  1406.298091  1417.301020     358.373649
    49   6528.0  1408.407059  1416.424099     359.596417
    50   6656.0  1407.257296  1423.771702     359.287226
    51   6784.0  1417.041521  1434.502208     359.990305
    52   6912.0  1416.674388  1444.705771     360.799196
    53   7040.0  1420.452022  1450.703085     361.163445
    54   7168.0  1417.073559  1453.861510     361.916095
    55   7296.0  1418.450645  1085.566174     362.415206
    56   7424.0  1425.638392  1100.000557     363.253824
    57   7552.0  1425.084061  1111.293881     363.509281
    58   7680.0  1430.682381  1122.153976     363.956375
    59   7808.0  1430.217406  1134.023547     364.794250
    60   7936.0  1428.307029  1143.792349     364.727746
    61   8064.0  1428.422118  1148.013840     364.990099
    62   8192.0  1428.368407  1152.880920     363.894845
    63   8320.0  1383.651982  1114.276916     361.712324
    64   8448.0  1387.815577  1124.332664     362.688461
    65   8576.0  1384.387077  1128.538907     363.490552
    66   8704.0  1381.836076  1134.350248     364.534231
    67   8832.0  1393.645369  1131.715478     365.053848
    68   8960.0  1386.565523  1138.719169     366.221443
    69   9088.0  1397.208816  1139.021817     366.222652
    70   9216.0  1399.476947  1145.261647     367.720700
    71   9344.0  1388.725925  1419.451526     367.506029
    72   9472.0  1397.613251  1425.561248     368.950617
    73   9600.0  1397.755829  1432.038453     369.141138
    74   9728.0  1400.477768  1440.207615     369.980959
    75   9856.0  1396.977924  1438.125584     370.205281
    76   9984.0  1393.082810  1449.176030     370.148177
    77  10112.0  1404.334527  1453.021548     371.042678
    78  10240.0  1408.089070  1466.930810     371.918759
    79  10368.0  1410.288255  1461.766415     370.050346
    80  10496.0  1403.828841  1464.443073     370.484074
    81  10624.0  1404.555921  1464.127136     371.355624
    82  10752.0  1395.358993  1468.783496     370.896287
    83  10880.0  1390.698937  1477.384217     372.111583
    84  11008.0  1417.361420  1477.673515     372.284045
    85  11136.0  1417.132424  1485.473346     373.476759
    86  11264.0  1408.070217  1489.878283     373.552388
    87  11392.0  1417.966100  1490.126234     374.487283
    88  11520.0  1412.947875  1496.044176     373.724387
    89  11648.0  1415.722770  1496.808538     374.564754
    90  11776.0  1432.218898  1502.788957     375.883345
    91  11904.0  1422.071325  1507.829517     375.483486
    92  12032.0  1410.459652  1510.049224     375.889434
    93  12160.0  1405.738604  1512.614208     375.744420
    94  12288.0  1423.607267  1417.483185     376.216580
    95  12416.0  1433.010426  1394.594553     374.685664
    96  12544.0  1437.627430  1394.729043     375.784219
    97  12672.0  1430.716232  1388.079954     375.383076




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.083 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
