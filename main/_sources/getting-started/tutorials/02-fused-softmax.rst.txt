
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   479.535670   695.274294     208.125317
    1     384.0   665.958039   842.272138     264.005967
    2     512.0   816.870021   929.588655     299.048231
    3     640.0   885.005710   955.135695     328.804214
    4     768.0   963.028135  1024.816878     347.446506
    5     896.0  1007.636448  1079.474907     354.629065
    6    1024.0  1049.319828  1107.503230     354.619203
    7    1152.0  1095.590134  1041.575886     349.505886
    8    1280.0  1129.212374  1072.015235     349.443760
    9    1408.0  1167.947791  1109.532135     341.435636
    10   1536.0  1187.908548  1132.108259     333.860039
    11   1664.0  1210.463103  1162.186827     329.249408
    12   1792.0  1229.025071  1194.317609     325.883383
    13   1920.0  1254.691306  1189.568531     324.852707
    14   2048.0  1275.989270  1223.450489     324.797112
    15   2176.0  1231.250502   958.267607     326.170040
    16   2304.0  1256.251410   999.865279     325.957387
    17   2432.0  1269.787606  1040.005144     327.026982
    18   2560.0  1281.325576  1073.112748     328.411650
    19   2688.0  1293.962344  1100.642982     329.058918
    20   2816.0  1308.647993  1122.128289     329.447702
    21   2944.0  1313.399986  1143.929012     331.927809
    22   3072.0  1317.773448  1171.206484     333.796921
    23   3200.0  1330.519755  1172.919356     334.229630
    24   3328.0  1345.021056  1201.724979     336.083390
    25   3456.0  1349.742274  1227.215288     336.633137
    26   3584.0  1353.950250  1245.036652     338.466287
    27   3712.0  1366.853744  1264.303247     340.466643
    28   3840.0  1366.132221  1285.808530     340.275716
    29   3968.0  1370.143217  1298.269771     341.303579
    30   4096.0  1381.717916  1314.912997     338.768216
    31   4224.0  1326.093735  1291.788022     342.777594
    32   4352.0  1336.789407  1320.506893     345.082368
    33   4480.0  1335.733971  1335.619514     345.343590
    34   4608.0  1352.561266  1356.054263     346.199592
    35   4736.0  1349.880009  1365.800156     348.219102
    36   4864.0  1362.103114  1374.733685     349.222927
    37   4992.0  1361.409559  1392.782440     350.506730
    38   5120.0  1372.543443  1410.073605     350.961179
    39   5248.0  1371.427224  1367.150498     351.873209
    40   5376.0  1374.155793  1383.089139     352.238679
    41   5504.0  1377.564834  1389.722279     353.816542
    42   5632.0  1385.006739  1399.496140     353.776114
    43   5760.0  1387.469621  1419.175985     354.842194
    44   5888.0  1383.060068  1425.727530     354.734965
    45   6016.0  1399.162214  1435.290684     356.666505
    46   6144.0  1400.913826  1448.800101     356.927513
    47   6272.0  1405.822605  1399.355410     358.219221
    48   6400.0  1402.679478  1413.959734     359.163885
    49   6528.0  1410.030365  1423.643775     359.656483
    50   6656.0  1412.681448  1431.013139     359.622711
    51   6784.0  1413.981368  1441.296562     360.174079
    52   6912.0  1417.720379  1454.626255     360.794594
    53   7040.0  1412.037696  1452.490990     361.048598
    54   7168.0  1416.569399  1465.601709     361.855723
    55   7296.0  1421.636915  1087.749369     362.291757
    56   7424.0  1423.397919  1101.654214     362.921778
    57   7552.0  1422.899156  1113.371833     363.136027
    58   7680.0  1426.742221  1125.502491     363.921256
    59   7808.0  1427.805437  1137.665250     364.371387
    60   7936.0  1431.929771  1145.526003     364.955638
    61   8064.0  1433.025186  1153.651222     365.438973
    62   8192.0  1427.225600  1155.546600     364.396167
    63   8320.0  1386.610244  1114.432054     361.806163
    64   8448.0  1385.502567  1122.951372     362.491131
    65   8576.0  1387.061898  1124.758488     363.405873
    66   8704.0  1385.027451  1131.311691     363.551476
    67   8832.0  1389.299634  1127.123789     365.018266
    68   8960.0  1383.584224  1133.613903     365.621016
    69   9088.0  1395.864857  1131.898377     366.866777
    70   9216.0  1401.128389  1131.243915     367.505060
    71   9344.0  1382.245563  1418.875808     367.039929
    72   9472.0  1394.701243  1433.500930     368.056942
    73   9600.0  1400.915620  1432.561441     369.324930
    74   9728.0  1396.291305  1434.247851     369.177807
    75   9856.0  1400.982288  1440.095746     369.668480
    76   9984.0  1394.803015  1448.417029     369.969579
    77  10112.0  1397.954417  1455.769665     370.666348
    78  10240.0  1402.862282  1465.845723     370.665353
    79  10368.0  1410.506854  1459.061767     369.921687
    80  10496.0  1408.031693  1466.765899     370.955522
    81  10624.0  1403.023821  1466.953913     371.193088
    82  10752.0  1393.044592  1467.299554     371.367784
    83  10880.0  1392.520474  1476.029770     371.388273
    84  11008.0  1414.585204  1479.368264     373.143658
    85  11136.0  1411.449669  1483.673740     372.939325
    86  11264.0  1406.272863  1483.200033     372.899409
    87  11392.0  1418.410085  1488.386554     373.587391
    88  11520.0  1410.961086  1493.513831     373.693550
    89  11648.0  1412.473264  1499.315684     375.061380
    90  11776.0  1428.800623  1500.318102     374.974988
    91  11904.0  1427.396986  1505.794306     375.583844
    92  12032.0  1411.769306  1509.576029     375.558125
    93  12160.0  1407.434618  1515.121632     375.558674
    94  12288.0  1423.905521  1422.040040     375.723957
    95  12416.0  1431.036759  1396.440374     374.509073
    96  12544.0  1436.810094  1392.316710     374.902399
    97  12672.0  1427.096746  1388.930517     374.934942




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.160 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
