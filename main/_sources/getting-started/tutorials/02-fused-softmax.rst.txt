
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   475.414123   702.687034     203.082061
    1     384.0   656.106434   822.430496     258.573173
    2     512.0   805.949657   927.602825     304.207360
    3     640.0   877.229745   967.307381     331.164186
    4     768.0   961.691454  1022.007345     348.956991
    5     896.0  1012.589984  1078.253457     355.407847
    6    1024.0  1051.582697  1113.416876     353.584051
    7    1152.0  1099.079415  1042.016137     348.743725
    8    1280.0  1138.741763  1074.996040     348.989899
    9    1408.0  1165.145562  1108.162407     340.019845
    10   1536.0  1194.153401  1135.532027     333.034670
    11   1664.0  1216.535823  1160.126615     329.796098
    12   1792.0  1235.660107  1195.899535     324.959730
    13   1920.0  1262.067901  1191.336601     324.528599
    14   2048.0  1277.424566  1224.625143     324.762026
    15   2176.0  1228.799980   963.106835     325.748254
    16   2304.0  1258.859287   998.327574     326.332368
    17   2432.0  1275.523866  1033.448939     326.581065
    18   2560.0  1281.117257  1065.440583     327.679999
    19   2688.0  1288.651647  1094.445051     329.051050
    20   2816.0  1308.939419  1122.747254     329.653144
    21   2944.0  1310.547942  1145.619250     330.646984
    22   3072.0  1314.739023  1168.826150     333.566151
    23   3200.0  1336.874384  1171.116342     335.494441
    24   3328.0  1344.794508  1205.745083     336.184616
    25   3456.0  1347.514909  1227.784444     337.072119
    26   3584.0  1363.214591  1249.757117     338.505295
    27   3712.0  1362.161254  1263.894253     340.775220
    28   3840.0  1368.126222  1286.751449     340.622449
    29   3968.0  1369.491604  1301.984131     340.724368
    30   4096.0  1388.406321  1314.822550     338.288698
    31   4224.0  1325.176493  1289.699943     343.215186
    32   4352.0  1332.931965  1317.188735     344.890321
    33   4480.0  1339.136583  1339.132498     345.783037
    34   4608.0  1353.142851  1353.822624     346.926650
    35   4736.0  1353.209780  1369.256787     347.796980
    36   4864.0  1363.648551  1384.749003     348.962396
    37   4992.0  1366.583594  1397.647560     350.581734
    38   5120.0  1364.284890  1406.627048     351.152491
    39   5248.0  1369.334687  1359.123776     351.306527
    40   5376.0  1373.277225  1368.724210     351.742561
    41   5504.0  1373.911991  1396.836370     353.332375
    42   5632.0  1385.325141  1411.822844     353.179190
    43   5760.0  1383.358369  1421.990937     354.868199
    44   5888.0  1383.128084  1424.431080     354.957728
    45   6016.0  1391.237960  1427.909241     356.671157
    46   6144.0  1399.844972  1438.908669     356.750955
    47   6272.0  1402.998317  1408.871997     357.942775
    48   6400.0  1408.585926  1417.461118     358.441154
    49   6528.0  1411.278390  1416.905017     359.564223
    50   6656.0  1410.603900  1441.689189     359.450068
    51   6784.0  1411.350563  1442.845863     360.128117
    52   6912.0  1415.972255  1447.969505     360.955592
    53   7040.0  1417.525451  1456.767592     360.864998
    54   7168.0  1415.811747  1457.711442     361.326746
    55   7296.0  1419.063346  1087.596330     362.264334
    56   7424.0  1425.955321  1101.824017     363.267481
    57   7552.0  1423.682068  1113.076116     363.372638
    58   7680.0  1426.343605  1125.200299     363.794501
    59   7808.0  1426.933191  1135.574279     364.253341
    60   7936.0  1426.781609  1146.305110     364.928275
    61   8064.0  1426.103167  1152.039717     364.628176
    62   8192.0  1428.221282  1156.881280     363.786634
    63   8320.0  1384.206985  1112.356051     361.752535
    64   8448.0  1383.159692  1122.243552     362.657214
    65   8576.0  1386.311945  1123.904088     363.196571
    66   8704.0  1380.338136  1132.396739     364.373783
    67   8832.0  1395.095583  1127.711523     365.102787
    68   8960.0  1388.013286  1131.377321     365.266134
    69   9088.0  1393.193261  1132.690716     366.218218
    70   9216.0  1396.464543  1129.176235     367.645039
    71   9344.0  1392.796104  1422.824912     367.566326
    72   9472.0  1394.889925  1426.219220     368.273895
    73   9600.0  1400.437641  1432.471391     368.935147
    74   9728.0  1394.495417  1442.620096     369.705779
    75   9856.0  1397.196675  1439.994979     369.458656
    76   9984.0  1397.976686  1449.441486     369.919023
    77  10112.0  1400.872024  1450.547040     370.945200
    78  10240.0  1404.254587  1462.179282     371.443111
    79  10368.0  1412.444105  1464.396834     369.332774
    80  10496.0  1407.712678  1466.437837     370.808622
    81  10624.0  1409.114354  1464.122053     370.979434
    82  10752.0  1396.353950  1468.808778     370.874077
    83  10880.0  1386.686815  1479.736444     372.059604
    84  11008.0  1415.772515  1475.999739     372.713357
    85  11136.0  1417.797311  1481.651746     372.567137
    86  11264.0  1407.467163  1481.366497     372.952629
    87  11392.0  1413.946761  1487.127006     373.759095
    88  11520.0  1408.989237  1496.566890     373.768450
    89  11648.0  1414.450519  1500.596817     374.560325
    90  11776.0  1427.298254  1505.696818     374.988311
    91  11904.0  1424.571890  1508.728758     375.628466
    92  12032.0  1411.130911  1507.106408     375.761259
    93  12160.0  1408.802159  1513.496715     375.797527
    94  12288.0  1423.015914  1421.713407     375.803755
    95  12416.0  1427.955729  1395.585588     374.950861
    96  12544.0  1435.534243  1391.051495     375.020612
    97  12672.0  1424.843559  1389.130794     375.589933




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.158 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
