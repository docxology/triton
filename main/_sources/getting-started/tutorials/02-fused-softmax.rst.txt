
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   473.181234   693.936659     207.108727
    1     384.0   667.237041   821.813222     262.196333
    2     512.0   807.374829   921.638337     301.571965
    3     640.0   914.001855   913.826230     331.122022
    4     768.0   986.953491   993.004646     350.630341
    5     896.0  1043.666746  1045.882879     355.348124
    6    1024.0  1086.482618  1072.322514     353.960960
    7    1152.0  1098.999593  1078.394118     349.698026
    8    1280.0  1129.049788  1105.840555     350.077485
    9    1408.0  1165.621308  1142.968730     341.435637
    10   1536.0  1196.106442  1164.803534     334.089212
    11   1664.0  1211.401575  1183.393227     329.181592
    12   1792.0  1229.661083  1201.545329     326.012113
    13   1920.0  1263.737007  1226.763697     324.975936
    14   2048.0  1276.873186  1246.553174     324.726242
    15   2176.0  1233.004600   960.380579     325.882661
    16   2304.0  1249.295518  1004.271404     326.069117
    17   2432.0  1272.067616  1034.881171     327.220744
    18   2560.0  1286.530854  1072.723692     328.105808
    19   2688.0  1299.435530  1097.456139     329.540674
    20   2816.0  1308.306758  1126.203140     329.842193
    21   2944.0  1312.668249  1143.466190     332.177423
    22   3072.0  1317.511928  1174.125378     333.164314
    23   3200.0  1337.235297  1172.519078     335.017691
    24   3328.0  1347.252584  1204.453924     336.575960
    25   3456.0  1349.952471  1221.657564     337.227851
    26   3584.0  1363.133670  1246.808456     338.265909
    27   3712.0  1367.853723  1264.427236     341.018722
    28   3840.0  1374.045998  1286.014500     340.834223
    29   3968.0  1376.666752  1300.334561     341.453059
    30   4096.0  1385.401797  1318.916885     338.980945
    31   4224.0  1330.011747  1276.383287     342.943742
    32   4352.0  1343.039543  1297.544556     345.132432
    33   4480.0  1348.776923  1320.706709     345.969245
    34   4608.0  1358.018670  1338.036728     347.090601
    35   4736.0  1354.841829  1349.019678     348.312403
    36   4864.0  1369.302904  1363.560104     349.470228
    37   4992.0  1373.622622  1373.645489     350.277383
    38   5120.0  1373.754814  1388.707278     351.133945
    39   5248.0  1379.007401  1351.755780     351.760617
    40   5376.0  1381.341287  1373.976422     351.817974
    41   5504.0  1380.751470  1383.891245     353.717410
    42   5632.0  1395.741015  1392.559338     353.319948
    43   5760.0  1392.664550  1405.481249     355.214350
    44   5888.0  1392.677048  1419.368103     355.148227
    45   6016.0  1398.060170  1424.142191     356.836417
    46   6144.0  1406.703310  1431.632222     357.144413
    47   6272.0  1410.277164  1390.111131     357.914820
    48   6400.0  1411.079857  1415.608883     358.442830
    49   6528.0  1414.423298  1413.134042     359.159833
    50   6656.0  1415.153645  1439.135113     359.562920
    51   6784.0  1418.052652  1432.214329     360.606687
    52   6912.0  1423.982958  1437.335571     360.789997
    53   7040.0  1419.763256  1454.310135     361.154256
    54   7168.0  1421.978063  1460.904173     361.768974
    55   7296.0  1424.496070  1088.719134     362.598249
    56   7424.0  1431.454062  1097.818871     363.062709
    57   7552.0  1425.976794  1112.219271     363.924403
    58   7680.0  1432.586682  1123.513207     364.079746
    59   7808.0  1432.800396  1134.419984     364.776039
    60   7936.0  1434.327554  1144.355876     364.769648
    61   8064.0  1432.587576  1152.841465     365.139598
    62   8192.0  1432.229312  1154.384055     363.831716
    63   8320.0  1380.145062  1116.748676     361.827710
    64   8448.0  1385.627890  1123.500289     362.817967
    65   8576.0  1387.521855  1129.816613     363.414786
    66   8704.0  1383.740855  1136.811096     364.120027
    67   8832.0  1394.206150  1133.920897     364.378950
    68   8960.0  1381.643886  1141.590621     366.319479
    69   9088.0  1394.183721  1134.572777     367.232044
    70   9216.0  1404.237547  1143.459204     367.000966
    71   9344.0  1387.420444  1421.632991     367.668242
    72   9472.0  1399.304663  1428.953252     368.977566
    73   9600.0  1404.032092  1429.573194     368.590854
    74   9728.0  1397.363549  1441.488540     369.887707
    75   9856.0  1401.244005  1441.396148     370.326275
    76   9984.0  1396.827615  1445.721975     369.680737
    77  10112.0  1407.013344  1453.930206     371.180118
    78  10240.0  1411.817664  1462.655457     371.195881
    79  10368.0  1417.316168  1461.997648     370.303490
    80  10496.0  1411.627308  1463.343926     370.093590
    81  10624.0  1400.599814  1463.562461     370.681619
    82  10752.0  1397.142085  1468.947139     371.131886
    83  10880.0  1396.014199  1480.507506     371.388273
    84  11008.0  1419.558941  1476.676100     372.058720
    85  11136.0  1424.425641  1484.599661     372.903845
    86  11264.0  1412.492162  1485.935154     373.143454
    87  11392.0  1418.238409  1490.691328     373.622600
    88  11520.0  1419.326135  1496.723730     373.486640
    89  11648.0  1420.076600  1499.994383     374.436377
    90  11776.0  1436.470495  1503.846746     374.908371
    91  11904.0  1426.389331  1506.178522     375.102611
    92  12032.0  1414.264669  1509.427463     375.218586
    93  12160.0  1417.723527  1513.615447     375.059835
    94  12288.0  1425.833133  1418.294747     375.290105
    95  12416.0  1438.436512  1394.707949     373.848343
    96  12544.0  1442.012513  1391.448345     375.582044
    97  12672.0  1435.482318  1389.255444     374.790188




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.391 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
