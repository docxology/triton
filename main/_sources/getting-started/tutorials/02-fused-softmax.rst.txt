
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.697136   710.956318     207.899062
    1     384.0   655.927137   842.255105     263.226829
    2     512.0   802.885065   917.095713     301.122576
    3     640.0   873.154497   951.678972     327.374454
    4     768.0   948.243300  1029.981299     347.963927
    5     896.0  1021.090350  1070.801720     355.008908
    6    1024.0  1064.538265  1102.519573     353.078014
    7    1152.0  1091.823286  1037.791761     350.100585
    8    1280.0  1127.551719  1070.492590     349.878129
    9    1408.0  1170.574755  1102.850665     340.704518
    10   1536.0  1195.171616  1134.192051     333.682510
    11   1664.0  1217.709014  1168.533454     330.641801
    12   1792.0  1229.236142  1194.465967     325.700359
    13   1920.0  1250.687032  1192.869630     324.355451
    14   2048.0  1266.085150  1223.760416     323.422214
    15   2176.0  1236.052331   962.438470     325.757789
    16   2304.0  1250.783455   998.853256     326.206523
    17   2432.0  1272.389175  1032.483257     326.733115
    18   2560.0  1286.118102  1066.140586     328.391275
    19   2688.0  1296.909810  1099.302560     329.451517
    20   2816.0  1311.782511  1125.852560     329.361042
    21   2944.0  1319.329965  1145.689204     331.718312
    22   3072.0  1316.799151  1168.667966     333.009173
    23   3200.0  1342.993171  1172.192507     334.465429
    24   3328.0  1346.011191  1206.119576     336.234096
    25   3456.0  1352.196601  1225.239961     336.395030
    26   3584.0  1361.754212  1248.600542     338.409453
    27   3712.0  1370.240330  1264.226879     340.732743
    28   3840.0  1367.583017  1282.281268     340.534098
    29   3968.0  1375.549670  1301.364591     341.358967
    30   4096.0  1383.296702  1319.270243     338.744736
    31   4224.0  1322.212422  1298.909689     343.061100
    32   4352.0  1338.722328  1318.833419     345.538840
    33   4480.0  1340.593926  1340.548091     345.488598
    34   4608.0  1352.349125  1355.958359     346.797821
    35   4736.0  1353.545683  1365.694223     347.933587
    36   4864.0  1358.204949  1378.616453     349.005631
    37   4992.0  1366.010149  1398.386607     350.292082
    38   5120.0  1368.103029  1405.979816     350.955551
    39   5248.0  1366.545345  1357.992976     351.769266
    40   5376.0  1372.617159  1383.133435     351.675930
    41   5504.0  1377.426176  1393.138271     353.698904
    42   5632.0  1385.210248  1404.497446     353.236292
    43   5760.0  1387.729075  1412.711916     354.807375
    44   5888.0  1385.379745  1421.313478     354.670047
    45   6016.0  1397.862394  1430.228120     356.894670
    46   6144.0  1398.263449  1448.605826     356.797198
    47   6272.0  1408.115496  1397.049946     358.288731
    48   6400.0  1410.757074  1424.725141     358.567421
    49   6528.0  1408.936840  1424.014610     359.453273
    50   6656.0  1404.960424  1442.282610     359.613512
    51   6784.0  1413.604910  1444.295300     360.275236
    52   6912.0  1419.708357  1444.825925     360.500573
    53   7040.0  1414.682397  1459.121041     361.200210
    54   7168.0  1413.667525  1468.666162     361.873991
    55   7296.0  1419.994752  1087.533443     362.474676
    56   7424.0  1427.881707  1100.279459     362.726473
    57   7552.0  1421.411698  1114.543879     363.591319
    58   7680.0  1427.614039  1125.220909     363.826181
    59   7808.0  1422.214110  1137.333299     364.566781
    60   7936.0  1427.818517  1146.011941     364.978444
    61   8064.0  1429.148092  1152.197081     365.361815
    62   8192.0  1428.494249  1155.782651     364.510029
    63   8320.0  1387.163914  1114.779736     362.007415
    64   8448.0  1384.411822  1122.204680     362.862685
    65   8576.0  1386.154841  1124.555393     363.330140
    66   8704.0  1384.271219  1130.146239     364.106682
    67   8832.0  1393.946566  1128.734975     365.030506
    68   8960.0  1386.363851  1131.502916     365.212961
    69   9088.0  1393.256942  1131.855031     366.032071
    70   9216.0  1402.368050  1129.698533     367.774126
    71   9344.0  1388.968394  1421.791398     368.003118
    72   9472.0  1400.782670  1426.722490     368.793498
    73   9600.0  1401.215153  1430.910627     368.327656
    74   9728.0  1397.384362  1437.931175     369.821126
    75   9856.0  1400.390299  1438.801718     369.421825
    76   9984.0  1390.632309  1451.214934     369.858044
    77  10112.0  1402.796087  1453.400742     371.521941
    78  10240.0  1405.733775  1462.583012     371.430617
    79  10368.0  1410.994004  1459.340973     369.726651
    80  10496.0  1405.905349  1466.888571     370.133488
    81  10624.0  1402.157822  1468.975756     371.126296
    82  10752.0  1392.800786  1469.908483     372.068346
    83  10880.0  1393.365956  1477.060610     371.426311
    84  11008.0  1417.961455  1480.168359     372.306150
    85  11136.0  1411.982201  1481.639182     373.214510
    86  11264.0  1405.808139  1486.159299     372.859505
    87  11392.0  1415.729188  1486.750620     373.653413
    88  11520.0  1410.459653  1492.765647     373.539445
    89  11648.0  1415.566679  1501.864334     374.507195
    90  11776.0  1427.393940  1499.171492     375.424164
    91  11904.0  1424.861436  1509.538746     375.408596
    92  12032.0  1411.556885  1508.865689     375.275867
    93  12160.0  1408.185288  1514.952492     375.987940
    94  12288.0  1424.148743  1422.754183     376.189916
    95  12416.0  1429.819794  1398.323546     374.747510
    96  12544.0  1441.516679  1394.806401     375.749042
    97  12672.0  1429.340855  1389.479821     375.440271




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.181 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
