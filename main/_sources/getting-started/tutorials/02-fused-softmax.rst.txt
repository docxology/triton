
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   474.517124   692.530980     207.045895
    1     384.0   665.830013   835.344551     264.955208
    2     512.0   809.254632   919.642706     304.533056
    3     640.0   912.601834   925.793011     331.355920
    4     768.0   982.427049   991.176265     350.654793
    5     896.0  1051.108222  1044.399452     354.501297
    6    1024.0  1074.487846  1070.975805     356.866581
    7    1152.0  1091.169376  1069.643388     350.723016
    8    1280.0  1128.224430  1113.111433     349.895085
    9    1408.0  1169.687230  1141.977381     341.151334
    10   1536.0  1196.018960  1165.793262     333.792198
    11   1664.0  1210.820427  1183.860785     329.740992
    12   1792.0  1231.999976  1194.319698     326.006101
    13   1920.0  1254.570986  1221.596383     325.331912
    14   2048.0  1274.629389  1252.710275     324.217602
    15   2176.0  1234.134699   967.643921     325.706751
    16   2304.0  1254.182249  1003.970694     326.601369
    17   2432.0  1278.522852  1043.468096     326.786227
    18   2560.0  1288.022953  1075.625247     328.196136
    19   2688.0  1290.524440  1101.840788     329.397161
    20   2816.0  1313.498946  1130.400305     329.881039
    21   2944.0  1324.102192  1146.114796     331.449401
    22   3072.0  1326.846428  1174.507413     333.513843
    23   3200.0  1342.139096  1175.425733     335.342746
    24   3328.0  1349.040609  1204.633105     336.347413
    25   3456.0  1350.309338  1226.786691     336.826665
    26   3584.0  1363.185467  1249.068239     337.990569
    27   3712.0  1365.492268  1264.538351     340.642982
    28   3840.0  1374.170935  1284.943622     340.576495
    29   3968.0  1374.595298  1301.257121     341.133344
    30   4096.0  1387.891194  1318.713259     338.863440
    31   4224.0  1332.110960  1279.665499     342.915261
    32   4352.0  1347.565049  1301.084724     345.490300
    33   4480.0  1347.926115  1317.709969     346.054015
    34   4608.0  1354.771605  1325.236132     347.203723
    35   4736.0  1360.642393  1343.981670     348.313893
    36   4864.0  1369.939838  1361.511519     349.034557
    37   4992.0  1373.237182  1371.485787     350.258183
    38   5120.0  1380.674150  1388.790942     350.710748
    39   5248.0  1378.373376  1357.710183     351.598022
    40   5376.0  1378.059381  1372.656060     352.067199
    41   5504.0  1379.897309  1382.956634     353.717719
    42   5632.0  1393.951271  1399.643662     353.237251
    43   5760.0  1394.539989  1403.318369     355.284216
    44   5888.0  1392.598650  1411.953621     355.148227
    45   6016.0  1404.693861  1426.875137     356.771677
    46   6144.0  1409.532270  1424.182670     356.898979
    47   6272.0  1408.646821  1401.375380     357.872085
    48   6400.0  1415.989435  1402.972662     358.376108
    49   6528.0  1414.514224  1416.374592     359.504051
    50   6656.0  1416.109467  1420.833778     359.434211
    51   6784.0  1417.960860  1436.932333     360.768031
    52   6912.0  1427.481480  1438.471270     360.822185
    53   7040.0  1419.497210  1449.972919     361.034824
    54   7168.0  1423.093938  1456.661912     361.773538
    55   7296.0  1425.775769  1086.868722     362.606814
    56   7424.0  1430.074034  1099.526543     362.949045
    57   7552.0  1427.327054  1109.876100     363.577642
    58   7680.0  1429.616434  1122.325648     364.029472
    59   7808.0  1431.273883  1131.501036     364.648638
    60   7936.0  1433.351162  1142.193440     365.058952
    61   8064.0  1433.511518  1148.516565     364.971985
    62   8192.0  1433.710371  1151.591051     364.287657
    63   8320.0  1383.064932  1114.993112     361.845431
    64   8448.0  1389.264087  1124.748230     362.513226
    65   8576.0  1386.733315  1126.291497     363.758222
    66   8704.0  1377.862559  1133.273804     364.605586
    67   8832.0  1397.568120  1132.676753     365.338765
    68   8960.0  1388.424400  1140.814202     365.390263
    69   9088.0  1394.775027  1136.311816     366.218218
    70   9216.0  1405.722512  1145.785777     367.458248
    71   9344.0  1389.527800  1419.584816     367.854491
    72   9472.0  1400.755409  1430.540388     368.979656
    73   9600.0  1402.182982  1427.326166     368.644467
    74   9728.0  1396.953403  1435.711352     369.448721
    75   9856.0  1400.370032  1442.926923     369.594106
    76   9984.0  1396.292139  1449.588001     370.122251
    77  10112.0  1407.413606  1457.860362     371.553047
    78  10240.0  1413.291202  1462.857148     371.143243
    79  10368.0  1420.381720  1463.358981     370.236839
    80  10496.0  1407.762055  1464.584093     370.124621
    81  10624.0  1406.923202  1466.935347     370.681619
    82  10752.0  1397.353753  1470.507405     371.140783
    83  10880.0  1397.601176  1479.416449     372.452157
    84  11008.0  1422.696669  1476.147383     372.226583
    85  11136.0  1419.089965  1483.657973     373.178980
    86  11264.0  1411.163208  1481.456817     373.130134
    87  11392.0  1417.150690  1487.488630     373.873652
    88  11520.0  1410.360868  1493.497791     373.896283
    89  11648.0  1426.230351  1499.186442     374.578040
    90  11776.0  1432.625880  1505.179519     375.537506
    91  11904.0  1425.392192  1509.907129     375.527553
    92  12032.0  1415.412214  1508.092411     376.252336
    93  12160.0  1416.730573  1515.985218     375.700180
    94  12288.0  1425.042956  1420.249466     375.803756
    95  12416.0  1437.527602  1395.034421     374.222473
    96  12544.0  1441.344672  1393.065182     375.621581
    97  12672.0  1433.704891  1393.119577     375.651592




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 37.241 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
