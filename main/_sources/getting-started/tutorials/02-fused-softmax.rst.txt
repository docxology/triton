
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   475.893865   689.945728     204.790363
    1     384.0   653.961323   818.931057     259.474346
    2     512.0   796.136267   936.228568     301.386038
    3     640.0   880.273861   952.709375     328.907927
    4     768.0   957.701849  1020.129105     348.218280
    5     896.0  1022.233460  1082.107061     355.752081
    6    1024.0  1051.868813  1110.779666     354.753268
    7    1152.0  1091.368404  1031.469749     349.278956
    8    1280.0  1136.184970  1076.763480     350.213519
    9    1408.0  1168.874297  1102.910155     341.814768
    10   1536.0  1188.701311  1141.790708     333.056424
    11   1664.0  1210.120692  1161.214900     329.698455
    12   1792.0  1234.233710  1183.969905     325.136886
    13   1920.0  1253.461125  1191.708683     324.199373
    14   2048.0  1273.400026  1222.974779     324.662622
    15   2176.0  1229.175589   962.441297     326.427175
    16   2304.0  1251.013301  1004.921929     326.944703
    17   2432.0  1268.668604  1040.888382     327.632019
    18   2560.0  1287.146749  1071.926365     328.825951
    19   2688.0  1292.806588  1102.343982     329.468267
    20   2816.0  1308.240847  1123.645993     330.489796
    21   2944.0  1317.745429  1145.740048     331.955394
    22   3072.0  1320.272662  1174.213082     333.261450
    23   3200.0  1333.891626  1174.651960     334.938078
    24   3328.0  1344.003957  1208.350973     336.332355
    25   3456.0  1343.930024  1226.838122     336.826665
    26   3584.0  1358.302789  1247.636539     338.705011
    27   3712.0  1363.524939  1266.657747     340.611870
    28   3840.0  1361.647940  1287.922991     340.356727
    29   3968.0  1372.694114  1301.273179     341.502968
    30   4096.0  1384.004136  1318.835949     338.938953
    31   4224.0  1327.052214  1299.041760     342.892923
    32   4352.0  1334.509677  1316.518247     345.208859
    33   4480.0  1339.568295  1343.758162     345.198223
    34   4608.0  1352.021413  1354.824701     346.616292
    35   4736.0  1348.656763  1371.428998     347.212372
    36   4864.0  1362.397413  1377.777416     349.170188
    37   4992.0  1367.531118  1387.913411     350.253770
    38   5120.0  1369.313074  1400.825931     351.256134
    39   5248.0  1371.408690  1367.587508     351.877811
    40   5376.0  1376.652867  1375.311167     351.949507
    41   5504.0  1373.357462  1393.398300     354.115104
    42   5632.0  1389.166125  1401.918837     353.230639
    43   5760.0  1388.668312  1411.307430     354.741894
    44   5888.0  1386.135293  1431.560290     354.693230
    45   6016.0  1400.181567  1439.546635     356.647891
    46   6144.0  1400.986059  1443.212586     357.074916
    47   6272.0  1403.675944  1403.524466     358.154373
    48   6400.0  1406.537659  1413.798263     358.659765
    49   6528.0  1405.884496  1424.714549     359.350295
    50   6656.0  1411.515463  1430.140513     359.885875
    51   6784.0  1408.269462  1433.993703     360.050012
    52   6912.0  1417.420731  1454.135069     361.158195
    53   7040.0  1411.199124  1455.260904     360.860410
    54   7168.0  1413.471079  1462.561045     361.723333
    55   7296.0  1420.481993  1086.968775     362.428928
    56   7424.0  1421.271600  1099.175866     362.649315
    57   7552.0  1420.380274  1112.975144     363.563970
    58   7680.0  1425.167758  1125.122096     364.002059
    59   7808.0  1427.833864  1136.922761     364.712329
    60   7936.0  1426.445337  1145.589398     364.882681
    61   8064.0  1431.876930  1154.080304     364.777381
    62   8192.0  1426.218201  1157.419145     364.003882
    63   8320.0  1381.342738  1116.099316     361.672120
    64   8448.0  1383.775168  1124.344249     362.706317
    65   8576.0  1384.764922  1122.929486     363.187669
    66   8704.0  1380.674162  1129.260616     364.574364
    67   8832.0  1393.681809  1128.155427     364.711647
    68   8960.0  1382.244306  1130.844253     365.941000
    69   9088.0  1397.003230  1130.193962     366.946895
    70   9216.0  1400.280736  1131.490995     367.023138
    71   9344.0  1388.807431  1423.720649     367.836745
    72   9472.0  1400.519948  1429.197544     368.578239
    73   9600.0  1402.339522  1428.887186     368.969120
    74   9728.0  1399.641181  1439.234404     369.750543
    75   9856.0  1395.121725  1440.744200     369.860654
    76   9984.0  1388.556524  1446.654140     369.958767
    77  10112.0  1403.513361  1453.890598     371.611905
    78  10240.0  1405.135222  1464.685998     371.183496
    79  10368.0  1412.622430  1460.909504     369.815279
    80  10496.0  1404.289626  1467.410517     370.732992
    81  10624.0  1400.719541  1462.462282     370.974985
    82  10752.0  1396.928143  1470.995229     371.250995
    83  10880.0  1389.764626  1477.349095     371.656980
    84  11008.0  1421.528637  1480.192621     372.452110
    85  11136.0  1410.115539  1483.110074     373.010301
    86  11264.0  1406.757617  1486.257921     372.850640
    87  11392.0  1414.629999  1486.194415     373.735280
    88  11520.0  1411.261843  1494.386764     373.693549
    89  11648.0  1411.411868  1498.954804     373.959061
    90  11776.0  1426.834004  1503.848017     374.988312
    91  11904.0  1423.280175  1507.035776     375.404191
    92  12032.0  1410.036321  1510.918751     376.000001
    93  12160.0  1408.270753  1515.666657     375.748848
    94  12288.0  1424.298692  1421.510524     376.514551
    95  12416.0  1431.574998  1396.045310     374.707749
    96  12544.0  1436.285775  1390.919013     375.481037
    97  12672.0  1426.746049  1389.250524     375.312713




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.042 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
