
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   479.496079   705.114112     208.287752
    1     384.0   666.539702   820.365548     262.888170
    2     512.0   806.104215   918.187302     303.699859
    3     640.0   909.310096   929.098118     331.294122
    4     768.0   986.953488   978.360149     350.901248
    5     896.0  1051.603935  1027.618366     353.806553
    6    1024.0  1074.297086  1064.969619     352.842097
    7    1152.0  1092.417059  1078.499818     348.332400
    8    1280.0  1134.515640  1110.392689     348.104595
    9    1408.0  1161.814501  1137.788710     339.900358
    10   1536.0  1197.494102  1157.380101     333.671151
    11   1664.0  1218.668682  1192.866006     330.297745
    12   1792.0  1230.708501  1200.822438     325.662912
    13   1920.0  1259.296539  1226.939502     324.602981
    14   2048.0  1279.397765  1244.385817     324.319212
    15   2176.0  1234.733249   966.363765     325.132001
    16   2304.0  1259.163772  1003.884193     326.074265
    17   2432.0  1273.510698  1040.740436     326.373938
    18   2560.0  1287.408712  1069.673897     327.701665
    19   2688.0  1298.974472  1101.783034     329.141081
    20   2816.0  1307.025890  1124.005130     329.669153
    21   2944.0  1316.448925  1147.088021     331.399066
    22   3072.0  1320.306360  1170.681091     332.943680
    23   3200.0  1337.482619  1177.899298     334.929947
    24   3328.0  1346.616530  1203.880707     336.109082
    25   3456.0  1350.378188  1224.310172     336.779342
    26   3584.0  1364.697788  1240.745032     338.235538
    27   3712.0  1371.519435  1267.554371     340.018645
    28   3840.0  1372.502810  1283.551999     339.981359
    29   3968.0  1373.354095  1298.410084     340.965724
    30   4096.0  1385.037331  1317.963806     338.811725
    31   4224.0  1326.600769  1279.974951     342.873673
    32   4352.0  1343.462862  1300.493627     345.024732
    33   4480.0  1346.068376  1320.001970     345.650354
    34   4608.0  1360.608993  1335.742023     347.013965
    35   4736.0  1357.522605  1344.248629     348.036578
    36   4864.0  1366.404688  1357.820889     348.986545
    37   4992.0  1370.803160  1370.438232     350.472353
    38   5120.0  1377.200136  1387.843928     350.447955
    39   5248.0  1378.334924  1358.113824     351.736206
    40   5376.0  1374.509558  1369.225448     351.197408
    41   5504.0  1380.183819  1378.427682     353.774183
    42   5632.0  1393.605740  1388.603352     353.668952
    43   5760.0  1395.813921  1406.309415     355.013328
    44   5888.0  1389.923320  1417.157274     355.157523
    45   6016.0  1401.207299  1424.641084     356.736321
    46   6144.0  1408.946219  1429.420966     357.116613
    47   6272.0  1409.560026  1396.386351     357.497931
    48   6400.0  1410.319910  1412.905596     358.387484
    49   6528.0  1414.624851  1422.464460     358.987676
    50   6656.0  1418.655610  1422.754907     359.774505
    51   6784.0  1415.640454  1433.423622     360.054604
    52   6912.0  1424.846612  1440.554482     360.454675
    53   7040.0  1416.167919  1446.020382     361.085342
    54   7168.0  1422.011309  1457.429892     361.971366
    55   7296.0  1423.377531  1085.671350     362.653196
    56   7424.0  1432.335816  1099.373513     363.126391
    57   7552.0  1421.052564  1109.940764     363.467748
    58   7680.0  1431.802071  1123.460084     363.550295
    59   7808.0  1431.616308  1131.483721     363.963095
    60   7936.0  1431.107436  1143.947604     364.500138
    61   8064.0  1436.656725  1150.224964     364.650774
    62   8192.0  1432.086778  1153.256175     364.259019
    63   8320.0  1379.094122  1115.785166     361.570949
    64   8448.0  1384.273349  1124.709271     362.719712
    65   8576.0  1387.600979  1127.505230     363.423697
    66   8704.0  1382.142059  1132.936168     364.262443
    67   8832.0  1399.574878  1133.681545     365.156190
    68   8960.0  1387.675784  1140.463113     365.852058
    69   9088.0  1394.019650  1137.481096     366.671078
    70   9216.0  1404.497790  1143.446964     367.334523
    71   9344.0  1389.012079  1422.224236     367.504318
    72   9472.0  1398.933135  1432.495395     368.623064
    73   9600.0  1399.793537  1433.915031     368.926196
    74   9728.0  1401.379158  1437.781362     369.240679
    75   9856.0  1401.593318  1441.898533     369.368850
    76   9984.0  1393.777775  1451.396649     370.188570
    77  10112.0  1404.008463  1456.408728     371.670315
    78  10240.0  1407.039270  1464.250659     371.738979
    79  10368.0  1415.559180  1456.980114     370.196862
    80  10496.0  1410.454980  1463.494545     370.071428
    81  10624.0  1409.485903  1468.024076     371.023924
    82  10752.0  1396.997871  1474.068905     371.465793
    83  10880.0  1391.844663  1478.949350     371.926077
    84  11008.0  1422.149644  1475.050061     371.979259
    85  11136.0  1416.604383  1483.279453     372.859508
    86  11264.0  1409.352999  1486.693771     372.722124
    87  11392.0  1423.144747  1487.490448     373.744191
    88  11520.0  1417.798533  1497.411244     373.843377
    89  11648.0  1420.993246  1500.720116     374.622330
    90  11776.0  1429.803674  1502.619779     374.921690
    91  11904.0  1430.940452  1508.028490     374.973070
    92  12032.0  1411.526794  1506.844949     375.849647
    93  12160.0  1413.083819  1511.649185     375.373110
    94  12288.0  1423.925283  1420.720087     375.799322
    95  12416.0  1437.693415  1399.292395     374.500251
    96  12544.0  1443.175452  1392.806235     375.489817
    97  12672.0  1436.798395  1391.244827     375.581125




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.144 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
