
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   480.320557   694.519792     206.601991
    1     384.0   668.773179   819.559457     262.540408
    2     512.0   803.309631   916.736497     301.238613
    3     640.0   906.757798   913.478450     331.001049
    4     768.0   988.620370   981.870696     351.053210
    5     896.0  1050.806277  1043.995612     355.786316
    6    1024.0  1079.512938  1076.080151     353.207243
    7    1152.0  1101.185915  1063.898939     349.196320
    8    1280.0  1135.469885  1098.997767     348.805517
    9    1408.0  1157.409877  1128.426501     340.345567
    10   1536.0  1197.996034  1159.575816     333.765427
    11   1664.0  1208.524349  1190.190821     329.484216
    12   1792.0  1236.919259  1199.905758     325.978661
    13   1920.0  1256.509048  1226.432784     324.809025
    14   2048.0  1276.352433  1251.425658     324.930589
    15   2176.0  1234.684481   964.550849     325.340948
    16   2304.0  1252.857469   998.851303     325.889461
    17   2432.0  1277.737542  1031.292520     326.602011
    18   2560.0  1287.856149  1066.495112     327.828763
    19   2688.0  1291.118298  1096.604171     328.624519
    20   2816.0  1313.942327  1122.874723     329.247716
    21   2944.0  1321.420419  1142.376734     331.372001
    22   3072.0  1326.412140  1175.313522     333.580164
    23   3200.0  1336.520336  1167.616868     334.441809
    24   3328.0  1350.516716  1200.661262     336.095048
    25   3456.0  1351.654066  1222.410260     337.420119
    26   3584.0  1364.138033  1245.425802     338.120289
    27   3712.0  1369.189873  1263.422552     340.176689
    28   3840.0  1371.144580  1281.237601     340.250992
    29   3968.0  1378.286468  1301.511552     340.867750
    30   4096.0  1389.212284  1318.529789     338.597348
    31   4224.0  1330.385860  1275.265300     343.026191
    32   4352.0  1346.875608  1297.170963     345.172165
    33   4480.0  1344.776923  1316.456486     345.559781
    34   4608.0  1357.935125  1331.965484     347.224422
    35   4736.0  1361.458166  1347.914538     347.976385
    36   4864.0  1372.291490  1359.546233     348.815906
    37   4992.0  1372.322430  1369.912106     350.147819
    38   5120.0  1375.670739  1386.105494     350.693428
    39   5248.0  1370.775241  1356.778239     351.213545
    40   5376.0  1376.741905  1370.282335     351.831893
    41   5504.0  1379.495347  1384.923138     353.595448
    42   5632.0  1396.402638  1388.848648     353.045885
    43   5760.0  1391.047630  1407.647662     355.018872
    44   5888.0  1390.762328  1416.138528     354.976304
    45   6016.0  1402.272638  1413.493934     356.615322
    46   6144.0  1408.304677  1430.851011     356.973035
    47   6272.0  1410.526772  1398.662973     357.862836
    48   6400.0  1414.745606  1408.366744     358.304496
    49   6528.0  1418.185509  1426.990100     359.227237
    50   6656.0  1412.365136  1425.942915     359.797597
    51   6784.0  1420.013508  1431.032066     359.962755
    52   6912.0  1424.673096  1444.176828     360.918781
    53   7040.0  1420.925508  1448.034243     361.145065
    54   7168.0  1421.436694  1460.847342     361.322193
    55   7296.0  1425.447265  1083.590162     362.387764
    56   7424.0  1432.352730  1100.923904     362.885426
    57   7552.0  1425.529546  1109.208251     363.709881
    58   7680.0  1433.574849  1122.937969     363.509627
    59   7808.0  1427.976031  1131.563616     364.349775
    60   7936.0  1433.042235  1142.499468     364.530417
    61   8064.0  1438.161552  1149.701233     365.017271
    62   8192.0  1433.875809  1153.257691     364.173932
    63   8320.0  1382.672129  1116.514630     361.973960
    64   8448.0  1384.623597  1124.392167     362.902542
    65   8576.0  1390.190675  1126.711040     363.432610
    66   8704.0  1381.566381  1131.064337     364.583285
    67   8832.0  1394.328027  1131.594997     365.049399
    68   8960.0  1381.795788  1140.355667     366.167993
    69   9088.0  1396.754851  1137.282562     366.786693
    70   9216.0  1405.368483  1142.350277     367.617339
    71   9344.0  1396.612097  1420.770041     367.591020
    72   9472.0  1401.996477  1429.937182     368.865308
    73   9600.0  1400.901282  1428.560364     369.038113
    74   9728.0  1402.484935  1439.358475     369.843317
    75   9856.0  1403.139127  1440.601542     369.965718
    76   9984.0  1393.350267  1450.454957     370.662607
    77  10112.0  1404.834671  1453.742521     371.375367
    78  10240.0  1410.246401  1463.963561     371.183498
    79  10368.0  1420.066391  1461.719200     369.089787
    80  10496.0  1406.254992  1465.635806     370.080291
    81  10624.0  1401.537461  1465.677766     370.087421
    82  10752.0  1398.780574  1471.357029     370.793748
    83  10880.0  1395.382229  1478.185542     372.160198
    84  11008.0  1423.549024  1476.617660     372.045474
    85  11136.0  1418.608257  1483.041664     372.673401
    86  11264.0  1411.847695  1488.486138     373.543489
    87  11392.0  1419.959505  1490.876714     373.517098
    88  11520.0  1414.995434  1494.742069     373.671527
    89  11648.0  1422.125759  1498.715120     374.131284
    90  11776.0  1431.188766  1502.406527     374.553472
    91  11904.0  1430.078134  1510.140008     375.527551
    92  12032.0  1412.085055  1508.812357     375.805448
    93  12160.0  1413.435126  1513.168038     375.324542
    94  12288.0  1427.591223  1416.569188     375.834798
    95  12416.0  1438.446494  1397.398694     374.165201
    96  12544.0  1441.509581  1394.961289     375.349372
    97  12672.0  1433.465313  1390.889225     375.110556




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.103 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
