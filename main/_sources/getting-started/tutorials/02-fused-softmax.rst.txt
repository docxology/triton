
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.786434   687.793978     204.800005
    1     384.0   654.084821   826.946997     261.651394
    2     512.0   814.636420   929.425222     300.529921
    3     640.0   909.974314   927.721039     328.505023
    4     768.0   977.435364   983.108750     349.095202
    5     896.0  1042.280977  1038.880473     355.028844
    6    1024.0  1074.424251  1071.606867     355.934405
    7    1152.0  1099.657457  1077.117499     349.999859
    8    1280.0  1140.863730  1115.025678     349.182999
    9    1408.0  1168.958100  1139.945000     341.399281
    10   1536.0  1191.799337  1156.147176     333.141074
    11   1664.0  1216.268739  1192.904883     329.999348
    12   1792.0  1228.561314  1190.907480     324.653898
    13   1920.0  1260.294033  1226.958342     324.654542
    14   2048.0  1277.166393  1243.451330     324.460262
    15   2176.0  1241.802023   966.272299     325.799467
    16   2304.0  1253.263082  1004.064872     326.200752
    17   2432.0  1271.943638  1032.197861     326.475042
    18   2560.0  1286.193913  1069.673902     328.183117
    19   2688.0  1296.135502  1095.713679     329.402105
    20   2816.0  1310.104525  1120.750019     329.863304
    21   2944.0  1320.408422  1147.646964     331.212409
    22   3072.0  1318.081666  1167.354822     332.706537
    23   3200.0  1337.438208  1168.815699     334.497250
    24   3328.0  1340.657645  1199.100498     336.082049
    25   3456.0  1351.346357  1220.688329     336.816277
    26   3584.0  1360.954467  1246.941683     338.172401
    27   3712.0  1365.682161  1267.502501     340.536958
    28   3840.0  1373.387129  1281.982215     340.407557
    29   3968.0  1376.986059  1297.177647     341.173832
    30   4096.0  1385.471842  1319.629208     338.883527
    31   4224.0  1329.942891  1276.083737     342.952241
    32   4352.0  1344.932962  1297.136187     345.130413
    33   4480.0  1346.740732  1314.686910     345.285397
    34   4608.0  1357.061119  1335.696619     346.762178
    35   4736.0  1349.259933  1343.895554     347.890800
    36   4864.0  1367.636426  1361.450346     348.765229
    37   4992.0  1367.953356  1376.036773     350.003084
    38   5120.0  1376.671806  1388.092013     350.882372
    39   5248.0  1374.827823  1349.804611     351.500243
    40   5376.0  1379.699208  1369.993149     351.399755
    41   5504.0  1380.154418  1379.685053     353.595942
    42   5632.0  1398.123669  1390.793638     353.018039
    43   5760.0  1394.581604  1406.321479     354.971181
    44   5888.0  1387.737909  1408.245324     354.911298
    45   6016.0  1400.918036  1426.293680     356.359637
    46   6144.0  1409.055928  1426.672080     356.866588
    47   6272.0  1408.433909  1400.730002     357.659504
    48   6400.0  1411.645992  1407.099605     358.433603
    49   6528.0  1413.363353  1412.601275     359.324075
    50   6656.0  1417.846146  1437.116147     359.645712
    51   6784.0  1417.246494  1434.335412     360.215455
    52   6912.0  1421.568639  1443.216550     360.858978
    53   7040.0  1415.677773  1447.146910     360.874173
    54   7168.0  1426.021234  1458.003513     361.686830
    55   7296.0  1422.293125  1086.402882     362.246058
    56   7424.0  1427.815293  1097.863797     362.424864
    57   7552.0  1425.166441  1109.128201     363.199701
    58   7680.0  1432.026385  1123.877163     363.853341
    59   7808.0  1425.627111  1131.551825     364.239727
    60   7936.0  1431.127466  1142.722409     365.033187
    61   8064.0  1434.839992  1150.067345     365.107876
    62   8192.0  1435.425762  1152.379482     364.415859
    63   8320.0  1378.798768  1115.219223     361.944782
    64   8448.0  1382.558846  1124.617530     362.376240
    65   8576.0  1388.426630  1125.709935     363.152070
    66   8704.0  1382.022645  1133.230697     364.240182
    67   8832.0  1398.947829  1133.160080     364.880444
    68   8960.0  1381.616028  1138.726149     365.625456
    69   9088.0  1397.342613  1138.830900     366.880128
    70   9216.0  1405.862007  1144.363471     367.676189
    71   9344.0  1388.849740  1419.721665     367.689481
    72   9472.0  1398.252496  1433.834086     368.856330
    73   9600.0  1404.762746  1431.212877     368.393911
    74   9728.0  1396.122194  1440.806201     369.803377
    75   9856.0  1397.446165  1441.578214     369.950103
    76   9984.0  1396.014978  1446.961497     369.969580
    77  10112.0  1407.483979  1451.831598     370.845306
    78  10240.0  1409.116593  1467.984889     371.205862
    79  10368.0  1420.362949  1463.349213     370.010409
    80  10496.0  1405.488160  1468.134340     370.661838
    81  10624.0  1407.102751  1463.529870     370.246869
    82  10752.0  1395.145927  1470.661845     371.109646
    83  10880.0  1396.231964  1477.952302     371.762807
    84  11008.0  1420.197003  1475.998940     372.173557
    85  11136.0  1419.657488  1481.578120     372.828476
    86  11264.0  1412.743587  1486.867570     372.832908
    87  11392.0  1423.017654  1487.349551     373.675425
    88  11520.0  1414.835866  1493.094115     373.548250
    89  11648.0  1422.353603  1499.089051     374.423104
    90  11776.0  1434.546246  1500.788393     374.930573
    91  11904.0  1430.235436  1508.280166     375.373366
    92  12032.0  1413.548538  1510.966539     375.933654
    93  12160.0  1414.864889  1516.460555     376.032251
    94  12288.0  1423.469880  1420.395865     376.221021
    95  12416.0  1436.816052  1394.495974     374.345878
    96  12544.0  1447.807898  1392.323162     375.327436
    97  12672.0  1437.608275  1389.452526     375.237976




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 39.257 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
