
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   467.146444   687.860857     206.507966
    1     384.0   653.783196   814.733263     259.482633
    2     512.0   799.613521   916.747418     299.655846
    3     640.0   874.990233   918.258725     329.556896
    4     768.0   960.456736   983.450483     347.493897
    5     896.0  1017.111809  1037.177788     355.215525
    6    1024.0  1052.619281  1068.500745     353.877080
    7    1152.0  1099.492501  1074.746394     348.742222
    8    1280.0  1122.163133  1112.168615     350.013475
    9    1408.0  1162.778053  1132.354088     341.055203
    10   1536.0  1188.335155  1167.538194     331.735819
    11   1664.0  1216.085137  1182.340544     328.655259
    12   1792.0  1225.931419  1190.290589     325.158833
    13   1920.0  1254.156980  1226.461538     324.605130
    14   2048.0  1270.152615  1242.703714     324.238090
    15   2176.0  1228.202447   962.516653     326.269587
    16   2304.0  1257.652003  1003.850584     326.372788
    17   2432.0  1271.382192  1038.505407     327.003290
    18   2560.0  1285.352482  1067.463643     327.858830
    19   2688.0  1291.567766  1095.745258     328.933082
    20   2816.0  1312.008805  1125.177010     329.445167
    21   2944.0  1313.759368  1141.639703     331.146006
    22   3072.0  1320.697160  1171.872552     332.802395
    23   3200.0  1335.160240  1172.667565     334.875763
    24   3328.0  1347.381825  1198.855969     336.127095
    25   3456.0  1343.874523  1218.955836     336.564166
    26   3584.0  1351.732196  1243.604791     338.184280
    27   3712.0  1369.597754  1268.380560     340.712105
    28   3840.0  1366.428960  1284.022361     340.913588
    29   3968.0  1376.835106  1297.991340     341.357610
    30   4096.0  1388.866379  1314.925125     339.003265
    31   4224.0  1325.546737  1278.513276     343.624163
    32   4352.0  1339.816118  1295.633588     345.236160
    33   4480.0  1344.567811  1319.263799     345.225865
    34   4608.0  1353.159013  1335.293090     346.723580
    35   4736.0  1352.042374  1343.584813     347.378177
    36   4864.0  1358.614854  1361.865059     348.939129
    37   4992.0  1361.340111  1371.098698     350.652811
    38   5120.0  1374.422900  1382.165030     351.158739
    39   5248.0  1368.671556  1357.724915     352.105185
    40   5376.0  1372.758729  1374.175303     352.086036
    41   5504.0  1372.709955  1376.548380     353.796877
    42   5632.0  1386.144021  1389.719139     353.306002
    43   5760.0  1387.758900  1404.725126     355.070046
    44   5888.0  1386.740429  1410.148639     354.549544
    45   6016.0  1395.991422  1420.342608     356.727010
    46   6144.0  1402.120650  1436.359194     357.167586
    47   6272.0  1400.841841  1393.070591     357.761143
    48   6400.0  1411.803333  1409.938645     358.941712
    49   6528.0  1410.000911  1412.436780     359.452577
    50   6656.0  1407.387535  1430.491655     359.622711
    51   6784.0  1410.544813  1430.404412     360.330433
    52   6912.0  1417.577141  1446.840329     360.909578
    53   7040.0  1412.384672  1446.573419     360.878761
    54   7168.0  1415.358752  1461.805809     361.650333
    55   7296.0  1416.602246  1084.892465     362.305469
    56   7424.0  1422.158714  1099.527760     363.203751
    57   7552.0  1421.353864  1111.267922     363.213346
    58   7680.0  1424.042456  1122.519371     363.799029
    59   7808.0  1422.459594  1131.973969     364.912645
    60   7936.0  1427.501380  1143.695522     364.841932
    61   8064.0  1428.728685  1149.082653     365.230268
    62   8192.0  1428.480694  1152.070312     364.299336
    63   8320.0  1385.802764  1116.642073     362.004997
    64   8448.0  1388.712331  1124.782677     362.599199
    65   8576.0  1387.072305  1126.575576     363.521761
    66   8704.0  1379.273302  1134.211491     364.289158
    67   8832.0  1392.339984  1131.848580     364.769376
    68   8960.0  1385.780087  1140.337072     365.581057
    69   9088.0  1396.246823  1135.670037     366.817833
    70   9216.0  1397.737386  1143.252134     367.845383
    71   9344.0  1390.554513  1421.863499     367.506028
    72   9472.0  1397.895526  1430.628988     368.495540
    73   9600.0  1400.641563  1430.318371     369.257668
    74   9728.0  1396.763173  1436.935707     370.012054
    75   9856.0  1394.041446  1436.629200     369.307018
    76   9984.0  1387.419987  1445.846836     370.014212
    77  10112.0  1403.908816  1454.964034     371.016087
    78  10240.0  1408.688987  1465.574904     371.803264
    79  10368.0  1412.129027  1459.109838     369.615926
    80  10496.0  1408.558798  1464.028215     370.781925
    81  10624.0  1408.870024  1465.056094     370.832690
    82  10752.0  1397.541634  1474.449569     371.492532
    83  10880.0  1386.475245  1478.680724     372.279581
    84  11008.0  1420.729843  1473.360765     373.179191
    85  11136.0  1415.055114  1481.323434     372.762000
    86  11264.0  1410.020364  1484.276377     372.872805
    87  11392.0  1418.168719  1492.342142     373.679828
    88  11520.0  1407.844176  1495.187486     373.411853
    89  11648.0  1412.939773  1500.151406     374.688787
    90  11776.0  1426.981880  1500.932189     375.046071
    91  11904.0  1424.671866  1507.638717     375.553999
    92  12032.0  1412.455618  1509.600797     376.199184
    93  12160.0  1410.061260  1515.465708     375.956930
    94  12288.0  1417.670410  1421.148497     376.145490
    95  12416.0  1431.183208  1397.749998     374.831478
    96  12544.0  1439.065098  1394.396803     375.577650
    97  12672.0  1428.532854  1392.754813     374.566694




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.406 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
