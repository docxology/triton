
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   471.825667   694.594596     206.325102
    1     384.0   658.226359   832.119993     264.889178
    2     512.0   815.437514   933.157364     303.992875
    3     640.0   885.480103   924.253087     330.786521
    4     768.0   963.469009   992.011233     351.183649
    5     896.0  1012.845028  1029.044327     354.213303
    6    1024.0  1058.564908  1077.245833     352.380510
    7    1152.0  1084.830551  1066.943863     349.817343
    8    1280.0  1135.949380  1101.703975     349.372605
    9    1408.0  1167.753392  1139.887244     342.645824
    10   1536.0  1196.217336  1167.919119     333.405798
    11   1664.0  1220.532324  1182.144441     330.473714
    12   1792.0  1229.233081  1202.023094     326.408284
    13   1920.0  1264.878387  1225.832730     325.135458
    14   2048.0  1267.893395  1251.160629     324.969779
    15   2176.0  1231.354280   966.591404     325.286669
    16   2304.0  1249.442560  1000.990770     326.056961
    17   2432.0  1266.853236  1036.838254     327.338330
    18   2560.0  1284.804703  1073.219264     328.447297
    19   2688.0  1294.743443  1096.267766     329.973254
    20   2816.0  1306.782652  1124.480342     329.771944
    21   2944.0  1319.509472  1149.804049     331.471213
    22   3072.0  1317.722678  1176.805703     333.773179
    23   3200.0  1332.920123  1178.520191     335.320869
    24   3328.0  1345.894668  1206.033826     336.605372
    25   3456.0  1349.128714  1228.899166     336.478285
    26   3584.0  1358.466245  1245.375029     338.032235
    27   3712.0  1367.388643  1262.863410     340.879653
    28   3840.0  1370.915869  1279.967064     340.456577
    29   3968.0  1373.995304  1298.471783     341.096547
    30   4096.0  1389.304755  1319.273932     338.687339
    31   4224.0  1323.906330  1279.244440     343.292240
    32   4352.0  1342.071361  1300.006225     345.337159
    33   4480.0  1343.055667  1316.391277     345.908313
    34   4608.0  1357.161594  1337.370488     347.071266
    35   4736.0  1358.345515  1340.912238     347.965446
    36   4864.0  1363.467650  1349.126688     349.454694
    37   4992.0  1365.299593  1374.209843     350.064634
    38   5120.0  1368.769424  1387.777156     350.642593
    39   5248.0  1370.697717  1355.160929     351.904207
    40   5376.0  1374.050935  1361.998143     351.869521
    41   5504.0  1375.434445  1386.589278     353.910709
    42   5632.0  1383.993795  1392.295155     353.511530
    43   5760.0  1390.254324  1407.144998     355.316831
    44   5888.0  1388.125368  1412.701522     355.231925
    45   6016.0  1394.680656  1416.368800     357.053946
    46   6144.0  1405.074983  1434.551720     357.264939
    47   6272.0  1405.754371  1391.106931     357.488701
    48   6400.0  1409.216003  1414.224263     358.447442
    49   6528.0  1408.714345  1412.948405     359.259510
    50   6656.0  1407.637453  1429.386827     359.654914
    51   6784.0  1409.722176  1432.649372     360.735749
    52   6912.0  1420.308604  1444.937237     360.601589
    53   7040.0  1415.247828  1446.623458     360.713667
    54   7168.0  1417.094077  1454.351967     361.723333
    55   7296.0  1416.065569  1089.836844     362.611984
    56   7424.0  1423.676093  1098.343157     363.039971
    57   7552.0  1424.905650  1110.584442     363.825013
    58   7680.0  1425.379492  1122.417904     363.673393
    59   7808.0  1426.944275  1132.844081     364.725979
    60   7936.0  1430.331100  1141.308915     364.527435
    61   8064.0  1427.798000  1152.453384     365.112409
    62   8192.0  1431.009265  1152.972410     364.454970
    63   8320.0  1381.663083  1116.521409     361.938494
    64   8448.0  1387.997535  1123.436644     362.460931
    65   8576.0  1386.301294  1128.198385     363.535136
    66   8704.0  1381.894853  1132.636078     364.552066
    67   8832.0  1397.335292  1133.643970     364.618431
    68   8960.0  1382.459394  1140.937803     365.195241
    69   9088.0  1397.948625  1140.566259     366.768903
    70   9216.0  1395.864040  1145.225272     367.511598
    71   9344.0  1392.877964  1420.093601     367.260220
    72   9472.0  1397.196629  1426.297728     368.482236
    73   9600.0  1402.047621  1428.505008     369.013440
    74   9728.0  1399.941135  1441.658376     370.122877
    75   9856.0  1400.522213  1441.854910     370.191703
    76   9984.0  1393.220328  1451.593370     370.786506
    77  10112.0  1404.679495  1454.148597     371.607413
    78  10240.0  1404.229150  1464.114115     372.044305
    79  10368.0  1411.546339  1459.966548     369.522970
    80  10496.0  1408.988189  1466.019988     369.996097
    81  10624.0  1401.967120  1467.412350     370.526234
    82  10752.0  1391.328733  1469.524894     371.127439
    83  10880.0  1391.801426  1479.247761     371.776040
    84  11008.0  1419.094226  1477.543592     372.412292
    85  11136.0  1416.024557  1482.632860     372.637972
    86  11264.0  1409.039395  1483.325106     373.156775
    87  11392.0  1416.159173  1491.327474     374.050030
    88  11520.0  1412.940778  1495.298067     373.812519
    89  11648.0  1413.388216  1498.295955     374.516049
    90  11776.0  1426.673399  1503.547642     374.628832
    91  11904.0  1426.862891  1511.466554     375.479081
    92  12032.0  1410.940659  1507.191097     375.672911
    93  12160.0  1402.595261  1511.158139     375.855074
    94  12288.0  1426.027532  1416.636344     376.096632
    95  12416.0  1435.496110  1394.978848     374.800534
    96  12544.0  1434.512363  1396.016665     375.608400
    97  12672.0  1428.230489  1394.447293     375.264349




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 38.761 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
