
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   467.668093   685.991329     204.135601
    1     384.0   654.317867   836.529762     260.375255
    2     512.0   806.105910   929.987048     299.792082
    3     640.0   880.776694   963.996161     328.062744
    4     768.0   951.447280  1033.014078     347.637521
    5     896.0  1014.296897  1080.371990     356.521974
    6    1024.0  1053.535611  1097.768775     354.377572
    7    1152.0  1090.760265  1032.007476     350.976261
    8    1280.0  1137.246326  1068.941884     349.554504
    9    1408.0  1170.459132  1103.420909     342.302147
    10   1536.0  1188.295148  1141.449874     332.842449
    11   1664.0  1217.344017  1166.343917     328.843599
    12   1792.0  1234.266012  1193.071363     324.943979
    13   1920.0  1259.050273  1188.428052     324.679564
    14   2048.0  1268.008163  1220.717917     323.881095
    15   2176.0  1236.468001   964.867747     326.757389
    16   2304.0  1256.836403  1003.222257     326.199766
    17   2432.0  1266.876092  1037.653303     326.731722
    18   2560.0  1287.440264  1071.159782     328.776879
    19   2688.0  1295.448339  1104.555630     329.715491
    20   2816.0  1308.523000  1126.268762     329.313458
    21   2944.0  1310.145004  1144.799209     331.154636
    22   3072.0  1315.187448  1172.385732     332.829830
    23   3200.0  1329.403532  1179.302510     334.540177
    24   3328.0  1345.664301  1204.990122     336.079450
    25   3456.0  1345.345320  1230.139329     336.375420
    26   3584.0  1352.222688  1249.244346     338.176888
    27   3712.0  1369.080127  1268.235931     340.385623
    28   3840.0  1366.995196  1286.452091     340.502593
    29   3968.0  1372.149149  1304.581813     341.497086
    30   4096.0  1384.891184  1316.207220     338.895133
    31   4224.0  1323.919094  1295.860890     342.493062
    32   4352.0  1335.434442  1320.266050     344.677944
    33   4480.0  1338.249710  1335.213913     345.113145
    34   4608.0  1354.360499  1352.673172     346.816900
    35   4736.0  1353.176401  1371.752684     347.311837
    36   4864.0  1362.319176  1379.348354     348.459169
    37   4992.0  1365.469819  1398.726969     350.434386
    38   5120.0  1368.978538  1407.466838     350.796095
    39   5248.0  1372.078280  1363.116867     351.594590
    40   5376.0  1374.753358  1369.420313     352.166150
    41   5504.0  1376.427510  1398.130708     353.614254
    42   5632.0  1385.276100  1410.329557     352.912836
    43   5760.0  1385.577951  1418.478734     354.629698
    44   5888.0  1380.842808  1421.281129     354.892728
    45   6016.0  1395.785118  1430.714768     356.727010
    46   6144.0  1403.624491  1437.319431     356.629412
    47   6272.0  1402.984698  1407.769359     357.909080
    48   6400.0  1409.081070  1417.047658     358.659765
    49   6528.0  1410.085558  1419.200106     358.992763
    50   6656.0  1407.060147  1434.363833     359.259680
    51   6784.0  1410.918650  1441.358194     360.358040
    52   6912.0  1417.405099  1447.746552     361.024636
    53   7040.0  1414.364648  1458.788973     360.846650
    54   7168.0  1418.588940  1463.648816     361.474537
    55   7296.0  1417.994104  1087.157275     362.203057
    56   7424.0  1422.209246  1101.371934     363.194647
    57   7552.0  1420.021054  1114.813472     363.158763
    58   7680.0  1429.905250  1126.871313     363.713063
    59   7808.0  1428.693880  1135.689619     364.162591
    60   7936.0  1428.341213  1147.097349     364.472842
    61   8064.0  1431.633010  1152.814700     365.112410
    62   8192.0  1429.995797  1157.181259     364.102433
    63   8320.0  1383.224935  1114.648972     361.850868
    64   8448.0  1386.727775  1123.918583     362.349504
    65   8576.0  1387.324376  1125.053297     363.419241
    66   8704.0  1381.017324  1131.087661     364.164519
    67   8832.0  1393.546523  1129.176299     365.049400
    68   8960.0  1382.910798  1131.644201     366.025532
    69   9088.0  1394.595151  1132.528056     366.937992
    70   9216.0  1405.398191  1131.870651     367.085234
    71   9344.0  1389.493022  1418.197421     367.062016
    72   9472.0  1399.069662  1430.262908     368.856329
    73   9600.0  1399.816322  1428.963575     369.490948
    74   9728.0  1399.860039  1438.684293     369.338031
    75   9856.0  1397.180004  1440.426561     370.187362
    76   9984.0  1391.355957  1448.079398     370.344834
    77  10112.0  1402.400661  1457.127663     370.670771
    78  10240.0  1407.179909  1464.109296     370.790288
    79  10368.0  1408.142602  1458.923329     370.570331
    80  10496.0  1401.671923  1462.235084     370.786374
    81  10624.0  1404.231309  1464.951625     370.242438
    82  10752.0  1395.477394  1470.784664     371.149776
    83  10880.0  1391.330518  1478.040569     372.160198
    84  11008.0  1413.476449  1474.745321     373.316947
    85  11136.0  1414.379419  1483.798108     372.496329
    86  11264.0  1404.880860  1488.334083     372.602550
    87  11392.0  1414.875915  1492.200591     374.385608
    88  11520.0  1414.849610  1496.044172     373.482240
    89  11648.0  1415.143761  1496.956669     374.458505
    90  11776.0  1428.633585  1500.122383     374.855090
    91  11904.0  1426.126894  1509.063342     375.659707
    92  12032.0  1409.606694  1511.002786     375.778932
    93  12160.0  1407.431144  1515.134805     375.828512
    94  12288.0  1419.620685  1423.468748     376.118838
    95  12416.0  1430.278993  1397.777458     374.743093
    96  12544.0  1437.863204  1388.933564     375.287960
    97  12672.0  1429.211983  1390.595604     375.233581




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.192 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
