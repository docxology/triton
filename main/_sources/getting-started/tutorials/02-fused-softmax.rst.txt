
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.959285   695.706460     206.141873
    1     384.0   665.328494   825.686573     263.438509
    2     512.0   809.187345   928.854258     300.496271
    3     640.0   873.481742   964.382161     328.329837
    4     768.0   954.782463  1012.901312     347.047996
    5     896.0  1013.923171  1081.422466     354.783479
    6    1024.0  1063.257061  1109.935299     355.493095
    7    1152.0  1091.246722  1039.544562     349.069098
    8    1280.0  1134.590697  1068.627360     350.213519
    9    1408.0  1167.460909  1104.500443     341.623319
    10   1536.0  1190.398228  1131.876226     334.275154
    11   1664.0  1217.828909  1169.159581     329.034638
    12   1792.0  1234.452228  1195.359785     325.576331
    13   1920.0  1254.200876  1189.507276     323.947117
    14   2048.0  1274.114069  1230.782579     323.907151
    15   2176.0  1228.082958   966.403089     325.809004
    16   2304.0  1257.124964  1002.586687     326.089890
    17   2432.0  1276.236159  1039.154560     327.064219
    18   2560.0  1281.657629  1070.689945     328.429914
    19   2688.0  1286.607725  1100.270666     329.146659
    20   2816.0  1303.665772  1128.838477     329.605125
    21   2944.0  1319.285400  1146.023134     331.907530
    22   3072.0  1319.884951  1172.987410     333.650863
    23   3200.0  1331.092458  1176.338637     335.234803
    24   3328.0  1343.577282  1207.665837     335.917413
    25   3456.0  1352.190631  1227.219022     336.635040
    26   3584.0  1360.504313  1250.697515     338.022067
    27   3712.0  1367.131466  1262.838365     340.935333
    28   3840.0  1370.117853  1285.593942     340.245927
    29   3968.0  1369.129988  1298.405257     341.227495
    30   4096.0  1383.108657  1317.356093     338.974520
    31   4224.0  1329.375605  1292.850312     342.966509
    32   4352.0  1334.622538  1322.276035     345.876823
    33   4480.0  1344.000004  1338.565373     345.886465
    34   4608.0  1351.301450  1356.405226     346.650653
    35   4736.0  1346.562982  1364.237145     347.745278
    36   4864.0  1355.500238  1384.463168     348.758269
    37   4992.0  1367.258850  1398.631773     350.296823
    38   5120.0  1373.294453  1407.001214     350.858742
    39   5248.0  1367.074909  1359.340787     351.889844
    40   5376.0  1371.885680  1372.112584     351.913296
    41   5504.0  1373.568507  1386.773454     353.562541
    42   5632.0  1386.979258  1408.526960     353.338544
    43   5760.0  1387.223773  1412.244251     355.298192
    44   5888.0  1386.444123  1425.482620     354.999528
    45   6016.0  1394.332645  1432.651299     356.374485
    46   6144.0  1401.793010  1449.075191     356.898979
    47   6272.0  1401.916800  1399.166228     357.946083
    48   6400.0  1407.241775  1413.080868     358.876963
    49   6528.0  1412.845190  1435.548366     359.758174
    50   6656.0  1413.592406  1431.855448     359.968042
    51   6784.0  1414.149730  1434.863399     360.450091
    52   6912.0  1418.169788  1461.120173     360.717269
    53   7040.0  1419.609231  1457.988186     360.695331
    54   7168.0  1419.031658  1460.669779     362.109618
    55   7296.0  1418.890603  1086.465568     362.456376
    56   7424.0  1427.211291  1100.227783     362.744631
    57   7552.0  1427.327055  1113.557587     363.156284
    58   7680.0  1427.234860  1126.429893     363.938103
    59   7808.0  1425.748038  1135.689766     364.539504
    60   7936.0  1430.111231  1145.772601     364.756099
    61   8064.0  1433.069240  1152.538460     365.107877
    62   8192.0  1428.731140  1157.848504     364.337383
    63   8320.0  1385.513250  1114.213511     361.636393
    64   8448.0  1380.526832  1124.238015     362.603662
    65   8576.0  1390.349544  1122.384542     363.356866
    66   8704.0  1386.403766  1129.091274     364.498565
    67   8832.0  1393.224337  1129.521137     365.120586
    68   8960.0  1384.840958  1132.888816     365.932102
    69   9088.0  1394.853634  1130.670173     366.679970
    70   9216.0  1398.967160  1129.480263     367.538278
    71   9344.0  1389.734521  1420.567030     367.041504
    72   9472.0  1397.415828  1432.443721     369.017994
    73   9600.0  1398.115038  1429.842515     368.641473
    74   9728.0  1396.513157  1437.728129     369.869950
    75   9856.0  1400.186461  1436.736769     369.789124
    76   9984.0  1393.936547  1451.965332     370.586470
    77  10112.0  1399.519740  1453.238360     371.579714
    78  10240.0  1407.457228  1464.640395     370.855374
    79  10368.0  1410.787191  1461.441043     370.125809
    80  10496.0  1406.688059  1465.171327     370.266544
    81  10624.0  1403.962394  1465.429035     370.806021
    82  10752.0  1392.347989  1471.656716     371.581688
    83  10880.0  1393.192478  1478.690222     372.292848
    84  11008.0  1419.686625  1474.642649     372.469810
    85  11136.0  1416.372519  1481.959593     373.258934
    86  11264.0  1406.153286  1486.657644     372.779724
    87  11392.0  1415.572824  1490.477832     373.900098
    88  11520.0  1412.144491  1493.514723     374.448296
    89  11648.0  1411.735558  1499.671593     374.308090
    90  11776.0  1426.049522  1499.440179     374.921690
    91  11904.0  1426.743508  1504.469943     375.365354
    92  12032.0  1410.181448  1510.536361     375.986729
    93  12160.0  1409.647078  1512.957278     375.655949
    94  12288.0  1421.955717  1424.830311     376.007831
    95  12416.0  1431.560280  1397.097245     374.619426
    96  12544.0  1435.153902  1396.298876     375.749043
    97  12672.0  1429.959446  1389.432620     375.475471




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.224 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
