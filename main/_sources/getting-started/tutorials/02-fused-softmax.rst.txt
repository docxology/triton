
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   467.567145   698.699619     203.107443
    1     384.0   652.321802   828.128112     259.836577
    2     512.0   799.055199   938.290749     299.284202
    3     640.0   879.356692   962.558349     326.993317
    4     768.0   954.294971  1012.036344     347.659742
    5     896.0  1010.095481  1066.431872     354.753481
    6    1024.0  1060.011046  1112.401537     354.276129
    7    1152.0  1094.970281  1030.730485     347.391928
    8    1280.0  1124.716080  1067.892202     349.239462
    9    1408.0  1162.492654  1107.583924     339.780133
    10   1536.0  1185.704226  1131.883822     331.874367
    11   1664.0  1206.789977  1169.671181     329.484217
    12   1792.0  1227.107808  1192.207976     325.474747
    13   1920.0  1252.529241  1197.292326     324.174635
    14   2048.0  1276.444611  1227.929692     324.135947
    15   2176.0  1237.422747   958.422083     325.603230
    16   2304.0  1255.426056  1003.672259     325.944026
    17   2432.0  1276.847513  1037.808781     327.367801
    18   2560.0  1288.662892  1070.270694     327.562413
    19   2688.0  1285.477873  1099.464071     328.662212
    20   2816.0  1303.189555  1123.623632     329.479799
    21   2944.0  1314.857305  1141.962899     331.466255
    22   3072.0  1318.463335  1168.247241     332.906095
    23   3200.0  1334.835388  1171.008261     334.726318
    24   3328.0  1348.655737  1201.318138     335.908172
    25   3456.0  1351.066595  1222.981065     336.870521
    26   3584.0  1354.529753  1248.711984     337.926155
    27   3712.0  1362.350622  1268.355686     340.417562
    28   3840.0  1374.074246  1282.902168     340.646064
    29   3968.0  1369.722223  1297.623734     340.756398
    30   4096.0  1381.062082  1314.187111     338.759089
    31   4224.0  1320.366200  1294.836034     342.711062
    32   4352.0  1336.733725  1314.733613     345.345335
    33   4480.0  1338.861414  1339.845780     345.416580
    34   4608.0  1355.122809  1357.133729     346.660472
    35   4736.0  1352.800673  1366.151557     347.934142
    36   4864.0  1360.344441  1379.423895     348.849665
    37   4992.0  1367.976756  1397.621923     350.135680
    38   5120.0  1369.259881  1411.206988     350.763355
    39   5248.0  1367.516629  1367.672631     351.301534
    40   5376.0  1369.075586  1384.246858     351.827038
    41   5504.0  1374.326309  1382.431596     353.468562
    42   5632.0  1385.574896  1410.879464     353.064453
    43   5760.0  1386.550979  1418.774328     354.888671
    44   5888.0  1382.066055  1424.074442     355.092450
    45   6016.0  1393.167388  1432.163368     356.931949
    46   6144.0  1398.444652  1442.112485     356.676989
    47   6272.0  1404.949671  1407.544414     358.242389
    48   6400.0  1411.116203  1412.915752     358.617829
    49   6528.0  1407.727022  1419.348618     359.457227
    50   6656.0  1406.380297  1443.659767     359.406643
    51   6784.0  1411.924275  1437.272278     360.394856
    52   6912.0  1414.590249  1443.501511     360.408788
    53   7040.0  1415.266948  1459.474564     360.511585
    54   7168.0  1414.138038  1461.725593     362.052202
    55   7296.0  1418.190647  1086.293347     362.346613
    56   7424.0  1426.598459  1101.242328     362.584866
    57   7552.0  1421.824679  1114.495084     363.372638
    58   7680.0  1429.978898  1125.259355     363.837653
    59   7808.0  1427.719853  1136.883567     364.589516
    60   7936.0  1433.625512  1147.106217     364.887122
    61   8064.0  1429.361093  1151.862615     364.831669
    62   8192.0  1424.723807  1156.568991     364.026248
    63   8320.0  1380.907152  1111.964538     361.645324
    64   8448.0  1384.901144  1121.559283     362.398523
    65   8576.0  1386.501303  1122.234686     363.450436
    66   8704.0  1383.530880  1131.227134     364.351508
    67   8832.0  1397.118129  1129.221522     364.902667
    68   8960.0  1387.398037  1133.317496     365.381395
    69   9088.0  1396.862366  1131.579773     366.884579
    70   9216.0  1398.940123  1130.879446     367.653938
    71   9344.0  1385.440718  1424.246558     366.907724
    72   9472.0  1398.462468  1433.333201     368.928163
    73   9600.0  1396.544274  1434.235005     368.398330
    74   9728.0  1393.336525  1441.287070     369.661432
    75   9856.0  1398.169748  1436.852982     370.088841
    76   9984.0  1391.018628  1448.474365     370.662331
    77  10112.0  1405.003436  1454.208792     371.437536
    78  10240.0  1407.658855  1463.733424     371.644788
    79  10368.0  1417.247963  1463.363197     370.059223
    80  10496.0  1407.107723  1466.639516     370.066996
    81  10624.0  1402.836112  1464.106955     371.193088
    82  10752.0  1394.028380  1471.867543     371.563854
    83  10880.0  1387.989644  1478.780447     372.027640
    84  11008.0  1417.385386  1476.106838     372.540626
    85  11136.0  1412.790319  1484.118529     372.730985
    86  11264.0  1409.835730  1484.253531     372.730985
    87  11392.0  1417.757481  1491.039733     373.561604
    88  11520.0  1408.758952  1495.634289     373.878647
    89  11648.0  1415.531411  1495.671052     374.724240
    90  11776.0  1427.346521  1502.358174     374.797392
    91  11904.0  1424.972023  1506.274936     375.087352
    92  12032.0  1411.042787  1511.539149     376.000000
    93  12160.0  1405.296829  1515.117308     375.890494
    94  12288.0  1422.238418  1421.810807     375.803754
    95  12416.0  1427.074472  1392.296798     374.398789
    96  12544.0  1435.937570  1389.254127     375.331824
    97  12672.0  1427.669565  1388.112746     375.299522




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 37.982 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
