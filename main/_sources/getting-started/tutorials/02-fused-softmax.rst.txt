
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   475.499795   693.561253     207.768122
    1     384.0   658.226357   834.008649     264.891626
    2     512.0   819.956692   925.224946     300.298107
    3     640.0   913.659287   920.200717     328.486909
    4     768.0   984.070445   980.524960     347.978751
    5     896.0  1053.911907  1043.793808     356.133703
    6    1024.0  1091.808480  1073.404317     354.463564
    7    1152.0  1089.006915  1075.523033     346.763194
    8    1280.0  1133.288903  1110.336427     347.620076
    9    1408.0  1161.959033  1138.544503     340.415424
    10   1536.0  1197.718540  1155.733217     333.839016
    11   1664.0  1221.096904  1185.199651     330.395678
    12   1792.0  1230.367321  1199.998634     325.878783
    13   1920.0  1260.470653  1218.951857     324.260522
    14   2048.0  1274.902626  1250.156857     324.036147
    15   2176.0  1231.396711   960.914700     325.608364
    16   2304.0  1253.953873  1005.964857     325.996330
    17   2432.0  1273.605524  1037.469680     327.153314
    18   2560.0  1286.561244  1069.327650     327.294307
    19   2688.0  1290.130387  1102.286403     329.337304
    20   2816.0  1314.108418  1125.374630     329.066974
    21   2944.0  1313.910421  1144.138716     331.653434
    22   3072.0  1326.343412  1175.364711     333.440395
    23   3200.0  1343.068686  1177.867567     334.295263
    24   3328.0  1347.882572  1199.344356     336.091944
    25   3456.0  1353.245075  1224.189650     336.916531
    26   3584.0  1357.234906  1249.056391     338.077427
    27   3712.0  1364.187914  1269.280241     340.813681
    28   3840.0  1368.734133  1284.573222     340.604029
    29   3968.0  1374.353643  1302.484958     340.926016
    30   4096.0  1383.126266  1312.885264     338.635029
    31   4224.0  1326.821628  1279.494116     342.497992
    32   4352.0  1340.958001  1300.525090     345.897983
    33   4480.0  1348.419367  1320.844162     345.920041
    34   4608.0  1359.931665  1336.342946     346.869381
    35   4736.0  1360.276919  1345.945099     348.100080
    36   4864.0  1373.793055  1360.773962     349.187052
    37   4992.0  1372.498410  1376.339984     349.977332
    38   5120.0  1378.446869  1384.766983     350.844507
    39   5248.0  1373.271319  1357.780410     351.245757
    40   5376.0  1381.647792  1365.542298     351.643876
    41   5504.0  1378.253686  1384.401699     353.521234
    42   5632.0  1390.478857  1394.873554     353.287410
    43   5760.0  1394.207472  1409.187096     355.545293
    44   5888.0  1393.810791  1416.540995     355.241225
    45   6016.0  1401.717686  1423.879500     356.513004
    46   6144.0  1405.601795  1429.575882     356.561477
    47   6272.0  1412.076353  1392.646635     357.862836
    48   6400.0  1414.777294  1404.029745     358.604353
    49   6528.0  1418.058005  1419.211234     359.218017
    50   6656.0  1414.023886  1423.032742     359.337738
    51   6784.0  1418.108351  1436.035227     359.916849
    52   6912.0  1426.079404  1440.670827     360.574033
    53   7040.0  1419.326884  1453.128223     360.743412
    54   7168.0  1421.589417  1456.528963     361.548057
    55   7296.0  1424.196515  1086.838750     362.351184
    56   7424.0  1430.155517  1097.625099     362.589439
    57   7552.0  1425.364069  1109.692054     363.422728
    58   7680.0  1430.759037  1123.827146     363.844288
    59   7808.0  1430.968959  1131.731402     364.616799
    60   7936.0  1430.261544  1143.454307     364.534925
    61   8064.0  1434.526050  1147.900359     364.781906
    62   8192.0  1434.819282  1150.652851     364.039230
    63   8320.0  1379.810562  1115.744377     361.859810
    64   8448.0  1385.097410  1125.071185     362.504390
    65   8576.0  1389.400748  1128.670082     363.749293
    66   8704.0  1383.000908  1135.180959     364.235732
    67   8832.0  1394.400307  1131.416153     365.031609
    68   8960.0  1386.470544  1139.501253     365.705401
    69   9088.0  1396.923435  1138.771088     366.395677
    70   9216.0  1403.465525  1143.637604     367.863201
    71   9344.0  1391.754300  1417.798933     367.420198
    72   9472.0  1399.015761  1430.321413     368.695250
    73   9600.0  1401.995335  1430.931077     368.595320
    74   9728.0  1396.445161  1438.853725     369.763987
    75   9856.0  1400.229803  1439.604494     370.097797
    76   9984.0  1391.616394  1445.698579     370.335891
    77  10112.0  1409.865018  1456.107865     371.171245
    78  10240.0  1407.065381  1461.997030     371.089682
    79  10368.0  1414.472963  1460.656711     370.303489
    80  10496.0  1410.061794  1462.508313     370.080292
    81  10624.0  1405.608789  1463.833066     370.695426
    82  10752.0  1395.537679  1466.002849     371.066202
    83  10880.0  1397.724826  1478.146929     371.133141
    84  11008.0  1426.856646  1476.964372     372.341523
    85  11136.0  1421.120555  1489.158165     372.699976
    86  11264.0  1411.088662  1485.701401     373.041359
    87  11392.0  1419.629453  1490.003968     373.847209
    88  11520.0  1411.003497  1495.788941     373.328309
    89  11648.0  1418.642173  1498.159623     374.109196
    90  11776.0  1435.550477  1501.298387     374.873840
    91  11904.0  1434.027172  1509.366776     375.615076
    92  12032.0  1413.000341  1510.168341     375.787770
    93  12160.0  1416.100255  1512.918183     375.673640
    94  12288.0  1427.762031  1420.028687     376.038907
    95  12416.0  1439.070694  1395.658310     374.500252
    96  12544.0  1444.832253  1393.285434     375.524947
    97  12672.0  1435.093419  1392.352440     375.554704




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.196 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
