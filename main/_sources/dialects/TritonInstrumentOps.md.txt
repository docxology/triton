# TritonInstrumentOps<!-- Autogenerated by mlir-tblgen; don't manually edit -->

### `tti.experimental_assert_in_thread` (triton::instrument::ExperimentalAssertInThreadOp)

_Assert the condition within the current thread_

Syntax:

```
operation ::= `tti.experimental_assert_in_thread` $condition `,` $message attr-dict `:` type($condition)
```

Assert that the condition is true given all the values are available in the current thread.
If the condition is false, the message is printed, and the program is aborted.
If check_any is true, any of the values in the condition must be true. Otherwise, all the
values in the condition must be true.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>message</code></td><td>::mlir::StringAttr</td><td>string attribute</td></tr>
<tr><td><code>check_any</code></td><td>::mlir::BoolAttr</td><td>bool attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `condition` | tensor of 1-bit signless integer values |


### `tti.experimental_check_outstanding_reads` (triton::instrument::ExperimentalCheckOutstandingReadsOp)

_Check if there are outstanding reads from a buffer guarded by a mbar_

Syntax:

```
operation ::= `tti.experimental_check_outstanding_reads` $buf `{` $buffers `,` $readBars `(` $readBarsType `)` `}` (`,` $pred^)? attr-dict `:` type($buf) `,` type($buffers) `,` type($readBars)
```

Check if there are outstanding reads from a buffer guarded by a mbar.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>readBarsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `buf` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `buffers` | ranked tensor of floating-point or integer or ptr values |
| `readBars` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_check_outstanding_writes` (triton::instrument::ExperimentalCheckOutstandingWritesOp)

_Check if there are outstanding writes to a buffer guarded by a mbar_

Syntax:

```
operation ::= `tti.experimental_check_outstanding_writes` $buf `{` $buffers `,` $writeBars `(` $writeBarsType `)` `}` (`,` $pred^)? attr-dict `:` type($buf) `,` type($buffers) `,` type($writeBars)
```

Check if there are outstanding writes to a buffer guarded by a mbar.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeBarsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `buf` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `buffers` | ranked tensor of floating-point or integer or ptr values |
| `writeBars` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_check_write_commit` (triton::instrument::ExperimentalCheckWriteCommitOp)

_Check if the buffer has an outstanding write commit._

Syntax:

```
operation ::= `tti.experimental_check_write_commit` $buf `{` $buffers `,` $writeCommits `(` $writeCommitsType `)` `}` (`,` $pred^)? attr-dict `:` type($buf) `,` type($buffers) `,` type($writeCommits)
```

Check if the buffer has an outstanding write commit.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeCommitsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `buf` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `buffers` | ranked tensor of floating-point or integer or ptr values |
| `writeCommits` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_clear_read_barrier` (triton::instrument::ExperimentalClearReadBarrierOp)

_Clear the read state for buffers being guarded by an mbar_

Syntax:

```
operation ::= `tti.experimental_clear_read_barrier` $mbar `{` $barriers `,` $readBars `(` $readBarsType `)` `}` (`,` $pred^)? attr-dict `:` type($mbar) `,` type($barriers) `,` type($readBars)
```

Clear the read state for buffers being guarded by an mbar.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>readBarsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `mbar` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `barriers` | ranked tensor of floating-point or integer or ptr values |
| `readBars` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_clear_write_barrier` (triton::instrument::ExperimentalClearWriteBarrierOp)

_Clear the write state for buffers being guarded by an mbar_

Syntax:

```
operation ::= `tti.experimental_clear_write_barrier` $mbar `{` $writeBars `(` $writeBarsType `)` `}` (`,` $pred^)? attr-dict `:` type($mbar) `,` type($writeBars)
```

Clear the write state for buffers being guarded by an mbar.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeBarsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `mbar` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `writeBars` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_clear_write_commits` (triton::instrument::ExperimentalClearWriteCommitsOp)

_Clear all the write commits more distant than `outstandingNum._

Syntax:

```
operation ::= `tti.experimental_clear_write_commits` `{` $writeCommits `(` $writeCommitsType `)` `}` `,` $outstandingNum (`,` $pred^)? attr-dict `:` type($writeCommits)
```

Clear all the write commits more distant than `outstandingNum` from the current thread.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeCommitsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
<tr><td><code>outstandingNum</code></td><td>::mlir::IntegerAttr</td><td>32-bit signless integer attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `writeCommits` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_commit_writes` (triton::instrument::ExperimentalCommitWritesOp)

_Commit all the staged writes for all the buffers._

Syntax:

```
operation ::= `tti.experimental_commit_writes` `{` $writeCommits `(` $writeCommitsType `)` `}` (`,` $pred^)? attr-dict `:` type($writeCommits)
```

Commit all the staged writes for all the buffers.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeCommitsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `writeCommits` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_mark_as_read` (triton::instrument::ExperimentalMarkAsReadOp)

_Mark a buffer as being read from using mbar as a guard_

Syntax:

```
operation ::= `tti.experimental_mark_as_read` $buf `,` $mbar `{` $buffers `,` $barriers `,` $readBars `(` $readBarsType `)` `}` (`,` $pred^)? attr-dict `:` type($buf) `,` type($mbar) `,` type($buffers) `,` type($barriers) `,` type($readBars)
```

Mark a buffer as being read from using mbar as a guard.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>readBarsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `buf` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `mbar` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `buffers` | ranked tensor of floating-point or integer or ptr values |
| `barriers` | ranked tensor of floating-point or integer or ptr values |
| `readBars` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_mark_as_write` (triton::instrument::ExperimentalMarkAsWriteOp)

_Mark a buffer as being written to using mbar as a guard_

Syntax:

```
operation ::= `tti.experimental_mark_as_write` $buf `,` $mbar `{` $buffers `,` $writeBars `(` $writeBarsType `)` `}` (`,` $pred^)? attr-dict `:` type($buf) `,` type($mbar) `,` type($buffers) `,` type($writeBars)
```

Mark a buffer as being written to using mbar as a guard.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeBarsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `buf` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `mbar` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `buffers` | ranked tensor of floating-point or integer or ptr values |
| `writeBars` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_shared_buffer_pointers` (triton::instrument::ExperimentalSharedBufferPointersOp)

_Definte an array of pointers to shared memory buffers_

Syntax:

```
operation ::= `tti.experimental_shared_buffer_pointers` attr-dict `:` type($result)
```

Create a tensor of pointers to shared memory buffers.

Traits: `AlwaysSpeculatableImplTrait`

Interfaces: `ConditionallySpeculatable`, `NoMemoryEffect (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>offsets</code></td><td>::mlir::DenseI32ArrayAttr</td><td>i32 dense array attribute</td></tr>
</table>

#### Results:

| Result | Description |
| :----: | ----------- |
| `result` | ranked tensor of floating-point or integer or ptr values |


### `tti.experimental_stage_write_for_commit` (triton::instrument::ExperimentalStageWriteForCommitOp)

_Preapre to an async copy of a buffer. Staged until commit_group is called._

Syntax:

```
operation ::= `tti.experimental_stage_write_for_commit` $buf `{` $buffers `,` $writeCommits `(` $writeCommitsType `)` `}` (`,` $pred^)? attr-dict `:` type($buf) `,` type($buffers) `,` type($writeCommits)
```

Preapre to an async copy of a buffer. Staged until commit_group is called. The implementation will write `-1` to the
`write_commits` tensor under the indices corresponding to the buffer.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>writeCommitsType</code></td><td>::mlir::TypeAttr</td><td>any type attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `buf` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |
| `buffers` | ranked tensor of floating-point or integer or ptr values |
| `writeCommits` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |

