# ProtonOps<!-- Autogenerated by mlir-tblgen; don't manually edit -->

### `proton.record` (triton::proton::RecordOp)

_Record an event_

Syntax:

```
operation ::= `proton.record` (`start` $isStart^):(`end`)? $name attr-dict
```

This operation annotates a region of IR where events are recorded.
Events can be classified as hardware or software events.
Hardware events are provided by the hardware performance counters obtained in later passes that convert Triton to target-specific IR.
Software events are provided by the user or the compiler.

Example:

```mlir
proton.record start "name0"
...
proton.record end "name0"
```

Scope names cannot be reused within the same function.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Read on ::mlir::SideEffects::DefaultResource, MemoryEffects::Write on ::mlir::SideEffects::DefaultResource}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>isStart</code></td><td>::mlir::UnitAttr</td><td>unit attribute</td></tr>
<tr><td><code>name</code></td><td>::mlir::StringAttr</td><td>string attribute</td></tr>
</table>

